{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.3.9\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.16.0+bef9a25", "config": "model = dict(\n    type='SoftTeacher',\n    model=dict(\n        type='FasterRCNN',\n        backbone=dict(\n            type='ResNet',\n            depth=50,\n            num_stages=4,\n            out_indices=(0, 1, 2, 3),\n            frozen_stages=1,\n            norm_cfg=dict(type='BN', requires_grad=False),\n            norm_eval=True,\n            style='caffe',\n            init_cfg=dict(\n                type='Pretrained',\n                checkpoint='open-mmlab://detectron2/resnet50_caffe')),\n        neck=dict(\n            type='FPN',\n            in_channels=[256, 512, 1024, 2048],\n            out_channels=256,\n            num_outs=5),\n        rpn_head=dict(\n            type='RPNHead',\n            in_channels=256,\n            feat_channels=256,\n            anchor_generator=dict(\n                type='AnchorGenerator',\n                scales=[8],\n                ratios=[0.5, 1.0, 2.0],\n                strides=[4, 8, 16, 32, 64]),\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[1.0, 1.0, 1.0, 1.0]),\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        roi_head=dict(\n            type='StandardRoIHead',\n            bbox_roi_extractor=dict(\n                type='SingleRoIExtractor',\n                roi_layer=dict(\n                    type='RoIAlign', output_size=7, sampling_ratio=0),\n                out_channels=256,\n                featmap_strides=[4, 8, 16, 32]),\n            bbox_head=dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=80,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=False,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n        train_cfg=dict(\n            rpn=dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.3,\n                    min_pos_iou=0.3,\n                    match_low_quality=True,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=256,\n                    pos_fraction=0.5,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=False),\n                allowed_border=-1,\n                pos_weight=-1,\n                debug=False),\n            rpn_proposal=dict(\n                nms_pre=2000,\n                max_per_img=1000,\n                nms=dict(type='nms', iou_threshold=0.7),\n                min_bbox_size=0),\n            rcnn=dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)),\n        test_cfg=dict(\n            rpn=dict(\n                nms_pre=1000,\n                max_per_img=1000,\n                nms=dict(type='nms', iou_threshold=0.7),\n                min_bbox_size=0),\n            rcnn=dict(\n                score_thr=0.05,\n                nms=dict(type='nms', iou_threshold=0.5),\n                max_per_img=100))),\n    train_cfg=dict(\n        use_teacher_proposal=False,\n        pseudo_label_initial_score_thr=0.5,\n        rpn_pseudo_threshold=0.9,\n        cls_pseudo_threshold=0.9,\n        reg_pseudo_threshold=0.02,\n        jitter_times=10,\n        jitter_scale=0.06,\n        min_pseduo_box_size=0,\n        unsup_weight=2.0),\n    test_cfg=dict(inference_on='student'))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Sequential',\n        transforms=[\n            dict(\n                type='RandResize',\n                img_scale=[(1333, 400), (1333, 1200)],\n                multiscale_mode='range',\n                keep_ratio=True),\n            dict(type='RandFlip', flip_ratio=0.5),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Identity'),\n                    dict(type='AutoContrast'),\n                    dict(type='RandEqualize'),\n                    dict(type='RandSolarize'),\n                    dict(type='RandColor'),\n                    dict(type='RandContrast'),\n                    dict(type='RandBrightness'),\n                    dict(type='RandSharpness'),\n                    dict(type='RandPosterize')\n                ])\n        ],\n        record=True),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='ExtraAttrs', tag='sup'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor', 'tag'))\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=8,\n    train=dict(\n        type='SemiDataset',\n        sup=dict(\n            type='CocoDataset',\n            ann_file='data/coco/annotations/instances_train2017.json',\n            img_prefix='data/coco/train2017/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(\n                    type='Sequential',\n                    transforms=[\n                        dict(\n                            type='RandResize',\n                            img_scale=[(1333, 400), (1333, 1200)],\n                            multiscale_mode='range',\n                            keep_ratio=True),\n                        dict(type='RandFlip', flip_ratio=0.5),\n                        dict(\n                            type='OneOf',\n                            transforms=[\n                                dict(type='Identity'),\n                                dict(type='AutoContrast'),\n                                dict(type='RandEqualize'),\n                                dict(type='RandSolarize'),\n                                dict(type='RandColor'),\n                                dict(type='RandContrast'),\n                                dict(type='RandBrightness'),\n                                dict(type='RandSharpness'),\n                                dict(type='RandPosterize')\n                            ])\n                    ],\n                    record=True),\n                dict(type='Pad', size_divisor=32),\n                dict(\n                    type='Normalize',\n                    mean=[103.53, 116.28, 123.675],\n                    std=[1.0, 1.0, 1.0],\n                    to_rgb=False),\n                dict(type='ExtraAttrs', tag='sup'),\n                dict(type='DefaultFormatBundle'),\n                dict(\n                    type='Collect',\n                    keys=['img', 'gt_bboxes', 'gt_labels'],\n                    meta_keys=('filename', 'ori_shape', 'img_shape',\n                               'img_norm_cfg', 'pad_shape', 'scale_factor',\n                               'tag'))\n            ]),\n        unsup=dict(\n            type='CocoDataset',\n            ann_file='data/coco/annotations/instances_unlabeled2017.json',\n            img_prefix='data/coco/unlabeled2017/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='PseudoSamples', with_bbox=True),\n                dict(\n                    type='MultiBranch',\n                    unsup_student=[\n                        dict(\n                            type='Sequential',\n                            transforms=[\n                                dict(\n                                    type='RandResize',\n                                    img_scale=[(1333, 400), (1333, 1200)],\n                                    multiscale_mode='range',\n                                    keep_ratio=True),\n                                dict(type='RandFlip', flip_ratio=0.5),\n                                dict(\n                                    type='ShuffledSequential',\n                                    transforms=[\n                                        dict(\n                                            type='OneOf',\n                                            transforms=[\n                                                dict(type='Identity'),\n                                                dict(type='AutoContrast'),\n                                                dict(type='RandEqualize'),\n                                                dict(type='RandSolarize'),\n                                                dict(type='RandColor'),\n                                                dict(type='RandContrast'),\n                                                dict(type='RandBrightness'),\n                                                dict(type='RandSharpness'),\n                                                dict(type='RandPosterize')\n                                            ]),\n                                        dict(\n                                            type='OneOf',\n                                            transforms=[{\n                                                'type': 'RandTranslate',\n                                                'x': (-0.1, 0.1)\n                                            }, {\n                                                'type': 'RandTranslate',\n                                                'y': (-0.1, 0.1)\n                                            }, {\n                                                'type': 'RandRotate',\n                                                'angle': (-30, 30)\n                                            },\n                                                        [{\n                                                            'type':\n                                                            'RandShear',\n                                                            'x': (-30, 30)\n                                                        }, {\n                                                            'type':\n                                                            'RandShear',\n                                                            'y': (-30, 30)\n                                                        }]])\n                                    ]),\n                                dict(\n                                    type='RandErase',\n                                    n_iterations=(1, 5),\n                                    size=[0, 0.2],\n                                    squared=True)\n                            ],\n                            record=True),\n                        dict(type='Pad', size_divisor=32),\n                        dict(\n                            type='Normalize',\n                            mean=[103.53, 116.28, 123.675],\n                            std=[1.0, 1.0, 1.0],\n                            to_rgb=False),\n                        dict(type='ExtraAttrs', tag='unsup_student'),\n                        dict(type='DefaultFormatBundle'),\n                        dict(\n                            type='Collect',\n                            keys=['img', 'gt_bboxes', 'gt_labels'],\n                            meta_keys=('filename', 'ori_shape', 'img_shape',\n                                       'img_norm_cfg', 'pad_shape',\n                                       'scale_factor', 'tag',\n                                       'transform_matrix'))\n                    ],\n                    unsup_teacher=[\n                        dict(\n                            type='Sequential',\n                            transforms=[\n                                dict(\n                                    type='RandResize',\n                                    img_scale=[(1333, 400), (1333, 1200)],\n                                    multiscale_mode='range',\n                                    keep_ratio=True),\n                                dict(type='RandFlip', flip_ratio=0.5)\n                            ],\n                            record=True),\n                        dict(type='Pad', size_divisor=32),\n                        dict(\n                            type='Normalize',\n                            mean=[103.53, 116.28, 123.675],\n                            std=[1.0, 1.0, 1.0],\n                            to_rgb=False),\n                        dict(type='ExtraAttrs', tag='unsup_teacher'),\n                        dict(type='DefaultFormatBundle'),\n                        dict(\n                            type='Collect',\n                            keys=['img', 'gt_bboxes', 'gt_labels'],\n                            meta_keys=('filename', 'ori_shape', 'img_shape',\n                                       'img_norm_cfg', 'pad_shape',\n                                       'scale_factor', 'tag',\n                                       'transform_matrix'))\n                    ])\n            ],\n            filter_empty_gt=False)),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_val_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    sampler=dict(\n        train=dict(\n            type='SemiBalanceSampler',\n            sample_ratio=[1, 1],\n            by_prob=True,\n            epoch_length=7330)))\nevaluation = dict(interval=4000, metric='bbox', type='SubModulesDistEvalHook')\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[480000, 640000])\nrunner = dict(type='IterBasedRunner', max_iters=720000)\ncheckpoint_config = dict(interval=4000, by_epoch=False, max_keep_ckpts=20)\ncustom_hooks = [\n    dict(type='NumClassCheckHook'),\n    dict(type='WeightSummary'),\n    dict(type='MeanTeacher', momentum=0.999, interval=1, warm_up=0)\n]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False),\n        dict(\n            type='WandbLoggerHook',\n            init_kwargs=dict(\n                project='pre_release',\n                name='soft_teacher_faster_rcnn_r50_caffe_fpn_coco_full_720k',\n                config=dict(\n                    work_dirs=\n                    './work_dirs/soft_teacher_faster_rcnn_r50_caffe_fpn_coco_full_720k',\n                    total_step=720000)),\n            by_epoch=False)\n    ])\nmmdet_base = '../../thirdparty/mmdetection/configs/_base_'\nstrong_pipeline = [\n    dict(\n        type='Sequential',\n        transforms=[\n            dict(\n                type='RandResize',\n                img_scale=[(1333, 400), (1333, 1200)],\n                multiscale_mode='range',\n                keep_ratio=True),\n            dict(type='RandFlip', flip_ratio=0.5),\n            dict(\n                type='ShuffledSequential',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Identity'),\n                            dict(type='AutoContrast'),\n                            dict(type='RandEqualize'),\n                            dict(type='RandSolarize'),\n                            dict(type='RandColor'),\n                            dict(type='RandContrast'),\n                            dict(type='RandBrightness'),\n                            dict(type='RandSharpness'),\n                            dict(type='RandPosterize')\n                        ]),\n                    dict(\n                        type='OneOf',\n                        transforms=[{\n                            'type': 'RandTranslate',\n                            'x': (-0.1, 0.1)\n                        }, {\n                            'type': 'RandTranslate',\n                            'y': (-0.1, 0.1)\n                        }, {\n                            'type': 'RandRotate',\n                            'angle': (-30, 30)\n                        },\n                                    [{\n                                        'type': 'RandShear',\n                                        'x': (-30, 30)\n                                    }, {\n                                        'type': 'RandShear',\n                                        'y': (-30, 30)\n                                    }]])\n                ]),\n            dict(\n                type='RandErase',\n                n_iterations=(1, 5),\n                size=[0, 0.2],\n                squared=True)\n        ],\n        record=True),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='ExtraAttrs', tag='unsup_student'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor', 'tag', 'transform_matrix'))\n]\nweak_pipeline = [\n    dict(\n        type='Sequential',\n        transforms=[\n            dict(\n                type='RandResize',\n                img_scale=[(1333, 400), (1333, 1200)],\n                multiscale_mode='range',\n                keep_ratio=True),\n            dict(type='RandFlip', flip_ratio=0.5)\n        ],\n        record=True),\n    dict(type='Pad', size_divisor=32),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='ExtraAttrs', tag='unsup_teacher'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_bboxes', 'gt_labels'],\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'img_norm_cfg',\n                   'pad_shape', 'scale_factor', 'tag', 'transform_matrix'))\n]\nunsup_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='PseudoSamples', with_bbox=True),\n    dict(\n        type='MultiBranch',\n        unsup_student=[\n            dict(\n                type='Sequential',\n                transforms=[\n                    dict(\n                        type='RandResize',\n                        img_scale=[(1333, 400), (1333, 1200)],\n                        multiscale_mode='range',\n                        keep_ratio=True),\n                    dict(type='RandFlip', flip_ratio=0.5),\n                    dict(\n                        type='ShuffledSequential',\n                        transforms=[\n                            dict(\n                                type='OneOf',\n                                transforms=[\n                                    dict(type='Identity'),\n                                    dict(type='AutoContrast'),\n                                    dict(type='RandEqualize'),\n                                    dict(type='RandSolarize'),\n                                    dict(type='RandColor'),\n                                    dict(type='RandContrast'),\n                                    dict(type='RandBrightness'),\n                                    dict(type='RandSharpness'),\n                                    dict(type='RandPosterize')\n                                ]),\n                            dict(\n                                type='OneOf',\n                                transforms=[{\n                                    'type': 'RandTranslate',\n                                    'x': (-0.1, 0.1)\n                                }, {\n                                    'type': 'RandTranslate',\n                                    'y': (-0.1, 0.1)\n                                }, {\n                                    'type': 'RandRotate',\n                                    'angle': (-30, 30)\n                                },\n                                            [{\n                                                'type': 'RandShear',\n                                                'x': (-30, 30)\n                                            }, {\n                                                'type': 'RandShear',\n                                                'y': (-30, 30)\n                                            }]])\n                        ]),\n                    dict(\n                        type='RandErase',\n                        n_iterations=(1, 5),\n                        size=[0, 0.2],\n                        squared=True)\n                ],\n                record=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='ExtraAttrs', tag='unsup_student'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor', 'tag',\n                           'transform_matrix'))\n        ],\n        unsup_teacher=[\n            dict(\n                type='Sequential',\n                transforms=[\n                    dict(\n                        type='RandResize',\n                        img_scale=[(1333, 400), (1333, 1200)],\n                        multiscale_mode='range',\n                        keep_ratio=True),\n                    dict(type='RandFlip', flip_ratio=0.5)\n                ],\n                record=True),\n            dict(type='Pad', size_divisor=32),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='ExtraAttrs', tag='unsup_teacher'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels'],\n                meta_keys=('filename', 'ori_shape', 'img_shape',\n                           'img_norm_cfg', 'pad_shape', 'scale_factor', 'tag',\n                           'transform_matrix'))\n        ])\n]\nfp16 = dict(loss_scale='dynamic')\nwork_dir = './work_dirs/soft_teacher_faster_rcnn_r50_caffe_fpn_coco_full_720k'\ncfg_name = 'soft_teacher_faster_rcnn_r50_caffe_fpn_coco_full_720k'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "soft_teacher_faster_rcnn_r50_caffe_fpn_coco_full_720k.py"}
