{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+6ddbff8", "config": "dataset_type = 'CocoDataset'\ndata_root = '../dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=768,\n        width=768,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=768,\n                width=768,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nvalid_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=True,\n        flip_direction=['horizontal', 'vertical', 'diagonal'],\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=14,\n    workers_per_gpu=3,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_train_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=768,\n                        width=768,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_val_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=True,\n                flip_direction=['horizontal', 'vertical', 'diagonal'],\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=36)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook', interval=100),\n        dict(\n            type='WandbLoggerHook',\n            interval=100,\n            init_kwargs=dict(\n                project='objectdetection', name='dynamic_head_ATSS_f5'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 6, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\n        )),\n    neck=[\n        dict(\n            type='FPN',\n            in_channels=[96, 192, 384, 768],\n            out_channels=256,\n            start_level=1,\n            add_extra_convs='on_output',\n            num_outs=5),\n        dict(\n            type='DyHead',\n            in_channels=256,\n            out_channels=256,\n            num_blocks=6,\n            zero_init_offset=False)\n    ],\n    bbox_head=dict(\n        type='ATSSHead',\n        num_classes=10,\n        in_channels=256,\n        pred_kernel_size=1,\n        stacked_convs=0,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128],\n            center_offset=0.5),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/dynamic/swinT'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2022, "exp_name": "myconfig.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 28242, "data_time": 0.0567, "loss_cls": 1.05808, "loss_bbox": 1.05282, "loss_centerness": 0.65587, "loss": 2.76676, "time": 3.12757}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 4e-05, "memory": 28242, "data_time": 0.02302, "loss_cls": 0.77063, "loss_bbox": 1.01339, "loss_centerness": 0.63786, "loss": 2.42188, "time": 3.08676}
{"mode": "val", "epoch": 1, "iter": 975, "lr": 6e-05, "bbox_mAP": 0.019, "bbox_mAP_50": 0.049, "bbox_mAP_75": 0.009, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.004, "bbox_mAP_l": 0.024, "bbox_mAP_copypaste": "0.019 0.049 0.009 0.000 0.004 0.024"}
{"mode": "val", "epoch": 1, "iter": 70, "lr": 6e-05, "memory": 28242, "data_time": 0.06951, "loss_cls": 0.54605, "loss_bbox": 0.87863, "loss_centerness": 0.63226, "loss": 2.05694, "time": 0.78187}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 8e-05, "memory": 28242, "data_time": 0.0573, "loss_cls": 0.5607, "loss_bbox": 0.8224, "loss_centerness": 0.63048, "loss": 2.01358, "time": 3.12098}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02418, "loss_cls": 0.53026, "loss_bbox": 0.74332, "loss_centerness": 0.62736, "loss": 1.90094, "time": 3.08424}
{"mode": "val", "epoch": 2, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.047, "bbox_mAP_50": 0.101, "bbox_mAP_75": 0.039, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.01, "bbox_mAP_l": 0.059, "bbox_mAP_copypaste": "0.047 0.101 0.039 0.007 0.010 0.059"}
{"mode": "val", "epoch": 2, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.06999, "loss_cls": 0.49509, "loss_bbox": 0.68156, "loss_centerness": 0.62626, "loss": 1.80291, "time": 0.78583}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05891, "loss_cls": 0.49492, "loss_bbox": 0.66711, "loss_centerness": 0.62449, "loss": 1.78653, "time": 3.12632}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02447, "loss_cls": 0.47981, "loss_bbox": 0.65514, "loss_centerness": 0.62392, "loss": 1.75887, "time": 3.09009}
{"mode": "val", "epoch": 3, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.094, "bbox_mAP_50": 0.167, "bbox_mAP_75": 0.097, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.018, "bbox_mAP_l": 0.116, "bbox_mAP_copypaste": "0.094 0.167 0.097 0.004 0.018 0.116"}
{"mode": "val", "epoch": 3, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07056, "loss_cls": 0.44964, "loss_bbox": 0.59201, "loss_centerness": 0.62218, "loss": 1.66383, "time": 0.78407}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.0568, "loss_cls": 0.45774, "loss_bbox": 0.59208, "loss_centerness": 0.62139, "loss": 1.67122, "time": 3.12203}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.0252, "loss_cls": 0.45092, "loss_bbox": 0.58063, "loss_centerness": 0.62009, "loss": 1.65164, "time": 3.08953}
{"mode": "val", "epoch": 4, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.113, "bbox_mAP_50": 0.192, "bbox_mAP_75": 0.121, "bbox_mAP_s": 0.013, "bbox_mAP_m": 0.029, "bbox_mAP_l": 0.139, "bbox_mAP_copypaste": "0.113 0.192 0.121 0.013 0.029 0.139"}
{"mode": "val", "epoch": 4, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.06964, "loss_cls": 0.4351, "loss_bbox": 0.55961, "loss_centerness": 0.61874, "loss": 1.61346, "time": 0.78218}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05717, "loss_cls": 0.42358, "loss_bbox": 0.54738, "loss_centerness": 0.61805, "loss": 1.58901, "time": 3.1176}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02394, "loss_cls": 0.42285, "loss_bbox": 0.54237, "loss_centerness": 0.61751, "loss": 1.58273, "time": 3.08409}
{"mode": "val", "epoch": 5, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.137, "bbox_mAP_50": 0.216, "bbox_mAP_75": 0.151, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.043, "bbox_mAP_l": 0.168, "bbox_mAP_copypaste": "0.137 0.216 0.151 0.010 0.043 0.168"}
{"mode": "val", "epoch": 5, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07085, "loss_cls": 0.42974, "loss_bbox": 0.52647, "loss_centerness": 0.61763, "loss": 1.57384, "time": 0.78612}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05807, "loss_cls": 0.41036, "loss_bbox": 0.52299, "loss_centerness": 0.61635, "loss": 1.54971, "time": 3.12686}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02454, "loss_cls": 0.41122, "loss_bbox": 0.52022, "loss_centerness": 0.61631, "loss": 1.54774, "time": 3.08379}
{"mode": "val", "epoch": 6, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.147, "bbox_mAP_50": 0.228, "bbox_mAP_75": 0.159, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.044, "bbox_mAP_l": 0.178, "bbox_mAP_copypaste": "0.147 0.228 0.159 0.011 0.044 0.178"}
{"mode": "val", "epoch": 6, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07113, "loss_cls": 0.4212, "loss_bbox": 0.51412, "loss_centerness": 0.61626, "loss": 1.55158, "time": 0.78202}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05688, "loss_cls": 0.413, "loss_bbox": 0.5157, "loss_centerness": 0.6166, "loss": 1.54531, "time": 3.11438}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02444, "loss_cls": 0.40257, "loss_bbox": 0.49621, "loss_centerness": 0.61298, "loss": 1.51175, "time": 3.08151}
{"mode": "val", "epoch": 7, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.164, "bbox_mAP_50": 0.257, "bbox_mAP_75": 0.178, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.045, "bbox_mAP_l": 0.201, "bbox_mAP_copypaste": "0.164 0.257 0.178 0.004 0.045 0.201"}
{"mode": "val", "epoch": 7, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07008, "loss_cls": 0.40801, "loss_bbox": 0.5066, "loss_centerness": 0.6163, "loss": 1.53091, "time": 0.78196}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05729, "loss_cls": 0.38583, "loss_bbox": 0.48385, "loss_centerness": 0.61282, "loss": 1.48249, "time": 3.11354}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02425, "loss_cls": 0.39085, "loss_bbox": 0.49287, "loss_centerness": 0.61511, "loss": 1.49883, "time": 3.07944}
{"mode": "val", "epoch": 8, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.187, "bbox_mAP_50": 0.281, "bbox_mAP_75": 0.203, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.065, "bbox_mAP_l": 0.228, "bbox_mAP_copypaste": "0.187 0.281 0.203 0.008 0.065 0.228"}
{"mode": "val", "epoch": 8, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07011, "loss_cls": 0.39608, "loss_bbox": 0.48921, "loss_centerness": 0.61498, "loss": 1.50028, "time": 0.78206}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05697, "loss_cls": 0.37501, "loss_bbox": 0.47876, "loss_centerness": 0.6133, "loss": 1.46707, "time": 3.11625}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02445, "loss_cls": 0.37208, "loss_bbox": 0.46383, "loss_centerness": 0.61259, "loss": 1.44851, "time": 3.08182}
{"mode": "val", "epoch": 9, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.216, "bbox_mAP_50": 0.324, "bbox_mAP_75": 0.237, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.071, "bbox_mAP_l": 0.256, "bbox_mAP_copypaste": "0.216 0.324 0.237 0.006 0.071 0.256"}
{"mode": "val", "epoch": 9, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07033, "loss_cls": 0.39935, "loss_bbox": 0.48089, "loss_centerness": 0.61534, "loss": 1.49558, "time": 0.78287}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05779, "loss_cls": 0.36249, "loss_bbox": 0.45449, "loss_centerness": 0.6124, "loss": 1.42938, "time": 3.11615}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02423, "loss_cls": 0.37456, "loss_bbox": 0.45774, "loss_centerness": 0.61158, "loss": 1.44388, "time": 3.08028}
{"mode": "val", "epoch": 10, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.216, "bbox_mAP_50": 0.321, "bbox_mAP_75": 0.23, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.068, "bbox_mAP_l": 0.259, "bbox_mAP_copypaste": "0.216 0.321 0.230 0.006 0.068 0.259"}
{"mode": "val", "epoch": 10, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.06995, "loss_cls": 0.38911, "loss_bbox": 0.46582, "loss_centerness": 0.61253, "loss": 1.46747, "time": 0.78319}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05717, "loss_cls": 0.35333, "loss_bbox": 0.43651, "loss_centerness": 0.61002, "loss": 1.39986, "time": 3.11322}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02476, "loss_cls": 0.36137, "loss_bbox": 0.43895, "loss_centerness": 0.61132, "loss": 1.41164, "time": 3.08448}
{"mode": "val", "epoch": 11, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.272, "bbox_mAP_50": 0.392, "bbox_mAP_75": 0.302, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.108, "bbox_mAP_l": 0.321, "bbox_mAP_copypaste": "0.272 0.392 0.302 0.009 0.108 0.321"}
{"mode": "val", "epoch": 11, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.06956, "loss_cls": 0.37841, "loss_bbox": 0.45636, "loss_centerness": 0.61126, "loss": 1.44603, "time": 0.7804}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05799, "loss_cls": 0.3495, "loss_bbox": 0.43365, "loss_centerness": 0.60886, "loss": 1.39201, "time": 3.11932}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02508, "loss_cls": 0.34663, "loss_bbox": 0.43026, "loss_centerness": 0.61007, "loss": 1.38695, "time": 3.08694}
{"mode": "val", "epoch": 12, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.278, "bbox_mAP_50": 0.412, "bbox_mAP_75": 0.309, "bbox_mAP_s": 0.024, "bbox_mAP_m": 0.119, "bbox_mAP_l": 0.326, "bbox_mAP_copypaste": "0.278 0.412 0.309 0.024 0.119 0.326"}
{"mode": "val", "epoch": 12, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.0702, "loss_cls": 0.37449, "loss_bbox": 0.47938, "loss_centerness": 0.61471, "loss": 1.46858, "time": 0.78032}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05823, "loss_cls": 0.34024, "loss_bbox": 0.42955, "loss_centerness": 0.60958, "loss": 1.37936, "time": 3.11715}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02418, "loss_cls": 0.34805, "loss_bbox": 0.43025, "loss_centerness": 0.61085, "loss": 1.38916, "time": 3.08206}
{"mode": "val", "epoch": 13, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.317, "bbox_mAP_50": 0.446, "bbox_mAP_75": 0.346, "bbox_mAP_s": 0.017, "bbox_mAP_m": 0.107, "bbox_mAP_l": 0.374, "bbox_mAP_copypaste": "0.317 0.446 0.346 0.017 0.107 0.374"}
{"mode": "val", "epoch": 13, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07056, "loss_cls": 0.36837, "loss_bbox": 0.45449, "loss_centerness": 0.61255, "loss": 1.43541, "time": 0.78221}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05751, "loss_cls": 0.33065, "loss_bbox": 0.41453, "loss_centerness": 0.60941, "loss": 1.35458, "time": 3.11566}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02425, "loss_cls": 0.33401, "loss_bbox": 0.41795, "loss_centerness": 0.60845, "loss": 1.36041, "time": 3.08081}
{"mode": "val", "epoch": 14, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.328, "bbox_mAP_50": 0.461, "bbox_mAP_75": 0.366, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.118, "bbox_mAP_l": 0.385, "bbox_mAP_copypaste": "0.328 0.461 0.366 0.006 0.118 0.385"}
{"mode": "val", "epoch": 14, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07094, "loss_cls": 0.37386, "loss_bbox": 0.44018, "loss_centerness": 0.61045, "loss": 1.42449, "time": 0.78305}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05702, "loss_cls": 0.32408, "loss_bbox": 0.41264, "loss_centerness": 0.60902, "loss": 1.34575, "time": 3.11479}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.02515, "loss_cls": 0.3312, "loss_bbox": 0.42215, "loss_centerness": 0.60992, "loss": 1.36327, "time": 3.08845}
{"mode": "val", "epoch": 15, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.336, "bbox_mAP_50": 0.467, "bbox_mAP_75": 0.375, "bbox_mAP_s": 0.019, "bbox_mAP_m": 0.123, "bbox_mAP_l": 0.394, "bbox_mAP_copypaste": "0.336 0.467 0.375 0.019 0.123 0.394"}
{"mode": "val", "epoch": 15, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.06957, "loss_cls": 0.36729, "loss_bbox": 0.44765, "loss_centerness": 0.61166, "loss": 1.4266, "time": 0.77974}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.0001, "memory": 28242, "data_time": 0.05752, "loss_cls": 0.32226, "loss_bbox": 0.40636, "loss_centerness": 0.60796, "loss": 1.33658, "time": 3.11587}
{"mode": "train", "epoch": 16, "iter": 200, "lr": 0.0001, "memory": 28242, "data_time": 0.0246, "loss_cls": 0.31679, "loss_bbox": 0.4046, "loss_centerness": 0.60821, "loss": 1.3296, "time": 3.08212}
{"mode": "val", "epoch": 16, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.346, "bbox_mAP_50": 0.475, "bbox_mAP_75": 0.378, "bbox_mAP_s": 0.016, "bbox_mAP_m": 0.113, "bbox_mAP_l": 0.408, "bbox_mAP_copypaste": "0.346 0.475 0.378 0.016 0.113 0.408"}
{"mode": "val", "epoch": 16, "iter": 70, "lr": 0.0001, "memory": 28242, "data_time": 0.07049, "loss_cls": 0.37381, "loss_bbox": 0.44039, "loss_centerness": 0.61109, "loss": 1.42529, "time": 0.78334}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 1e-05, "memory": 28242, "data_time": 0.05745, "loss_cls": 0.29849, "loss_bbox": 0.37219, "loss_centerness": 0.60647, "loss": 1.27715, "time": 3.11558}
{"mode": "train", "epoch": 17, "iter": 200, "lr": 1e-05, "memory": 28242, "data_time": 0.02462, "loss_cls": 0.29107, "loss_bbox": 0.37257, "loss_centerness": 0.60691, "loss": 1.27056, "time": 3.08266}
{"mode": "val", "epoch": 17, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.384, "bbox_mAP_50": 0.513, "bbox_mAP_75": 0.409, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.135, "bbox_mAP_l": 0.449, "bbox_mAP_copypaste": "0.384 0.513 0.409 0.011 0.135 0.449"}
{"mode": "val", "epoch": 17, "iter": 70, "lr": 1e-05, "memory": 28242, "data_time": 0.07018, "loss_cls": 0.33791, "loss_bbox": 0.40405, "loss_centerness": 0.60931, "loss": 1.35126, "time": 0.78348}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 1e-05, "memory": 28242, "data_time": 0.05701, "loss_cls": 0.28247, "loss_bbox": 0.3566, "loss_centerness": 0.6062, "loss": 1.24527, "time": 3.11531}
{"mode": "train", "epoch": 18, "iter": 200, "lr": 1e-05, "memory": 28242, "data_time": 0.02449, "loss_cls": 0.28099, "loss_bbox": 0.35288, "loss_centerness": 0.6042, "loss": 1.23807, "time": 3.08366}
{"mode": "val", "epoch": 18, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.394, "bbox_mAP_50": 0.521, "bbox_mAP_75": 0.42, "bbox_mAP_s": 0.013, "bbox_mAP_m": 0.141, "bbox_mAP_l": 0.462, "bbox_mAP_copypaste": "0.394 0.521 0.420 0.013 0.141 0.462"}
{"mode": "val", "epoch": 18, "iter": 70, "lr": 1e-05, "memory": 28242, "data_time": 0.07025, "loss_cls": 0.34025, "loss_bbox": 0.40795, "loss_centerness": 0.60927, "loss": 1.35747, "time": 0.77998}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 1e-05, "memory": 28242, "data_time": 0.05772, "loss_cls": 0.27864, "loss_bbox": 0.35828, "loss_centerness": 0.60587, "loss": 1.24279, "time": 3.11772}
{"mode": "train", "epoch": 19, "iter": 200, "lr": 1e-05, "memory": 28242, "data_time": 0.02452, "loss_cls": 0.27345, "loss_bbox": 0.34999, "loss_centerness": 0.60478, "loss": 1.22822, "time": 3.08418}
{"mode": "val", "epoch": 19, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.399, "bbox_mAP_50": 0.528, "bbox_mAP_75": 0.43, "bbox_mAP_s": 0.015, "bbox_mAP_m": 0.143, "bbox_mAP_l": 0.466, "bbox_mAP_copypaste": "0.399 0.528 0.430 0.015 0.143 0.466"}
{"mode": "val", "epoch": 19, "iter": 70, "lr": 1e-05, "memory": 28242, "data_time": 0.07156, "loss_cls": 0.3354, "loss_bbox": 0.40771, "loss_centerness": 0.60975, "loss": 1.35286, "time": 0.78711}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 1e-05, "memory": 28242, "data_time": 0.05777, "loss_cls": 0.27472, "loss_bbox": 0.35329, "loss_centerness": 0.60478, "loss": 1.23278, "time": 3.11954}
{"mode": "train", "epoch": 20, "iter": 200, "lr": 1e-05, "memory": 28242, "data_time": 0.02473, "loss_cls": 0.26569, "loss_bbox": 0.33615, "loss_centerness": 0.60452, "loss": 1.20636, "time": 3.08652}
{"mode": "val", "epoch": 20, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.401, "bbox_mAP_50": 0.529, "bbox_mAP_75": 0.43, "bbox_mAP_s": 0.013, "bbox_mAP_m": 0.142, "bbox_mAP_l": 0.47, "bbox_mAP_copypaste": "0.401 0.529 0.430 0.013 0.142 0.470"}
{"mode": "val", "epoch": 20, "iter": 70, "lr": 1e-05, "memory": 28242, "data_time": 0.07081, "loss_cls": 0.34127, "loss_bbox": 0.40016, "loss_centerness": 0.60825, "loss": 1.34968, "time": 0.78468}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 1e-05, "memory": 28242, "data_time": 0.05832, "loss_cls": 0.27261, "loss_bbox": 0.34615, "loss_centerness": 0.60467, "loss": 1.22343, "time": 3.11985}
{"mode": "train", "epoch": 21, "iter": 200, "lr": 1e-05, "memory": 28242, "data_time": 0.02479, "loss_cls": 0.25936, "loss_bbox": 0.3393, "loss_centerness": 0.60424, "loss": 1.20289, "time": 3.08748}
{"mode": "val", "epoch": 21, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.407, "bbox_mAP_50": 0.535, "bbox_mAP_75": 0.437, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.142, "bbox_mAP_l": 0.478, "bbox_mAP_copypaste": "0.407 0.535 0.437 0.010 0.142 0.478"}
{"mode": "val", "epoch": 21, "iter": 70, "lr": 1e-05, "memory": 28242, "data_time": 0.07039, "loss_cls": 0.33782, "loss_bbox": 0.4059, "loss_centerness": 0.60972, "loss": 1.35345, "time": 0.78275}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 1e-05, "memory": 28242, "data_time": 0.05787, "loss_cls": 0.26746, "loss_bbox": 0.3472, "loss_centerness": 0.60496, "loss": 1.21963, "time": 3.11937}
{"mode": "train", "epoch": 22, "iter": 200, "lr": 1e-05, "memory": 28242, "data_time": 0.025, "loss_cls": 0.26517, "loss_bbox": 0.34214, "loss_centerness": 0.60462, "loss": 1.21193, "time": 3.08617}
{"mode": "val", "epoch": 22, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.402, "bbox_mAP_50": 0.531, "bbox_mAP_75": 0.431, "bbox_mAP_s": 0.017, "bbox_mAP_m": 0.145, "bbox_mAP_l": 0.471, "bbox_mAP_copypaste": "0.402 0.531 0.431 0.017 0.145 0.471"}
{"mode": "val", "epoch": 22, "iter": 70, "lr": 1e-05, "memory": 28242, "data_time": 0.07099, "loss_cls": 0.33057, "loss_bbox": 0.3927, "loss_centerness": 0.60826, "loss": 1.33153, "time": 0.78465}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 0.0, "memory": 28242, "data_time": 0.05867, "loss_cls": 0.26415, "loss_bbox": 0.34325, "loss_centerness": 0.60542, "loss": 1.21282, "time": 3.11946}
{"mode": "train", "epoch": 23, "iter": 200, "lr": 0.0, "memory": 28242, "data_time": 0.02464, "loss_cls": 0.26566, "loss_bbox": 0.33986, "loss_centerness": 0.60449, "loss": 1.21001, "time": 3.08573}
{"mode": "val", "epoch": 23, "iter": 975, "lr": 0.0, "bbox_mAP": 0.407, "bbox_mAP_50": 0.538, "bbox_mAP_75": 0.435, "bbox_mAP_s": 0.015, "bbox_mAP_m": 0.145, "bbox_mAP_l": 0.477, "bbox_mAP_copypaste": "0.407 0.538 0.435 0.015 0.145 0.477"}
{"mode": "val", "epoch": 23, "iter": 70, "lr": 0.0, "memory": 28242, "data_time": 0.07045, "loss_cls": 0.33474, "loss_bbox": 0.40271, "loss_centerness": 0.60926, "loss": 1.34671, "time": 0.78526}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 0.0, "memory": 28242, "data_time": 0.05743, "loss_cls": 0.2599, "loss_bbox": 0.33923, "loss_centerness": 0.60414, "loss": 1.20327, "time": 3.12254}
{"mode": "train", "epoch": 24, "iter": 200, "lr": 0.0, "memory": 28242, "data_time": 0.02414, "loss_cls": 0.26364, "loss_bbox": 0.33771, "loss_centerness": 0.60418, "loss": 1.20554, "time": 3.08247}
{"mode": "val", "epoch": 24, "iter": 975, "lr": 0.0, "bbox_mAP": 0.409, "bbox_mAP_50": 0.539, "bbox_mAP_75": 0.439, "bbox_mAP_s": 0.013, "bbox_mAP_m": 0.146, "bbox_mAP_l": 0.479, "bbox_mAP_copypaste": "0.409 0.539 0.439 0.013 0.146 0.479"}
{"mode": "val", "epoch": 24, "iter": 70, "lr": 0.0, "memory": 28242, "data_time": 0.07133, "loss_cls": 0.33633, "loss_bbox": 0.39467, "loss_centerness": 0.60853, "loss": 1.33953, "time": 0.78375}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 0.0, "memory": 28242, "data_time": 0.05846, "loss_cls": 0.26507, "loss_bbox": 0.34471, "loss_centerness": 0.60533, "loss": 1.21512, "time": 3.12261}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 0.0, "memory": 28242, "data_time": 0.02453, "loss_cls": 0.25964, "loss_bbox": 0.32867, "loss_centerness": 0.60275, "loss": 1.19106, "time": 3.08622}
{"mode": "val", "epoch": 25, "iter": 975, "lr": 0.0, "bbox_mAP": 0.411, "bbox_mAP_50": 0.54, "bbox_mAP_75": 0.44, "bbox_mAP_s": 0.017, "bbox_mAP_m": 0.148, "bbox_mAP_l": 0.48, "bbox_mAP_copypaste": "0.411 0.540 0.440 0.017 0.148 0.480"}
{"mode": "val", "epoch": 25, "iter": 70, "lr": 0.0, "memory": 28242, "data_time": 0.06997, "loss_cls": 0.33399, "loss_bbox": 0.3971, "loss_centerness": 0.60783, "loss": 1.33892, "time": 0.78502}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 0.0, "memory": 28242, "data_time": 0.05737, "loss_cls": 0.26087, "loss_bbox": 0.33359, "loss_centerness": 0.60405, "loss": 1.19852, "time": 3.12309}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 0.0, "memory": 28242, "data_time": 0.02566, "loss_cls": 0.26483, "loss_bbox": 0.33945, "loss_centerness": 0.60404, "loss": 1.20833, "time": 3.09387}
{"mode": "val", "epoch": 26, "iter": 975, "lr": 0.0, "bbox_mAP": 0.411, "bbox_mAP_50": 0.541, "bbox_mAP_75": 0.44, "bbox_mAP_s": 0.015, "bbox_mAP_m": 0.148, "bbox_mAP_l": 0.481, "bbox_mAP_copypaste": "0.411 0.541 0.440 0.015 0.148 0.481"}
{"mode": "val", "epoch": 26, "iter": 70, "lr": 0.0, "memory": 28242, "data_time": 0.0706, "loss_cls": 0.33302, "loss_bbox": 0.394, "loss_centerness": 0.60872, "loss": 1.33574, "time": 0.78388}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 0.0, "memory": 28242, "data_time": 0.05781, "loss_cls": 0.26014, "loss_bbox": 0.33895, "loss_centerness": 0.60331, "loss": 1.20241, "time": 3.11782}
{"mode": "train", "epoch": 27, "iter": 200, "lr": 0.0, "memory": 28242, "data_time": 0.02469, "loss_cls": 0.26304, "loss_bbox": 0.34211, "loss_centerness": 0.60423, "loss": 1.20939, "time": 3.08344}
{"mode": "val", "epoch": 27, "iter": 975, "lr": 0.0, "bbox_mAP": 0.411, "bbox_mAP_50": 0.542, "bbox_mAP_75": 0.441, "bbox_mAP_s": 0.016, "bbox_mAP_m": 0.148, "bbox_mAP_l": 0.481, "bbox_mAP_copypaste": "0.411 0.542 0.441 0.016 0.148 0.481"}
{"mode": "val", "epoch": 27, "iter": 70, "lr": 0.0, "memory": 28242, "data_time": 0.07027, "loss_cls": 0.33194, "loss_bbox": 0.39676, "loss_centerness": 0.60894, "loss": 1.33764, "time": 0.78305}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 0.0, "memory": 28242, "data_time": 0.05685, "loss_cls": 0.26087, "loss_bbox": 0.33779, "loss_centerness": 0.6044, "loss": 1.20306, "time": 3.1192}
{"mode": "train", "epoch": 28, "iter": 200, "lr": 0.0, "memory": 28242, "data_time": 0.02454, "loss_cls": 0.26068, "loss_bbox": 0.34443, "loss_centerness": 0.60454, "loss": 1.20965, "time": 3.08758}
{"mode": "val", "epoch": 28, "iter": 975, "lr": 0.0, "bbox_mAP": 0.411, "bbox_mAP_50": 0.541, "bbox_mAP_75": 0.44, "bbox_mAP_s": 0.014, "bbox_mAP_m": 0.148, "bbox_mAP_l": 0.481, "bbox_mAP_copypaste": "0.411 0.541 0.440 0.014 0.148 0.481"}
{"mode": "val", "epoch": 28, "iter": 70, "lr": 0.0, "memory": 28242, "data_time": 0.07051, "loss_cls": 0.33784, "loss_bbox": 0.39939, "loss_centerness": 0.60933, "loss": 1.34656, "time": 0.78392}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 0.0, "memory": 28242, "data_time": 0.05805, "loss_cls": 0.26117, "loss_bbox": 0.34235, "loss_centerness": 0.60502, "loss": 1.20855, "time": 3.11993}
{"mode": "train", "epoch": 29, "iter": 200, "lr": 0.0, "memory": 28242, "data_time": 0.02464, "loss_cls": 0.26795, "loss_bbox": 0.34544, "loss_centerness": 0.6042, "loss": 1.21759, "time": 3.08687}
