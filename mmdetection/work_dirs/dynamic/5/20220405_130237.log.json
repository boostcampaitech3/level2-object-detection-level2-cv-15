{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+6ddbff8", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(\n    mean=[127.49413776397705, 127.43779182434082, 127.46098327636719],\n    std=[73.86627551077616, 73.88234865304638, 73.8944344154546],\n    to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=False),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(614, 1024), (655, 1024), (696, 1024), (737, 1024),\n                          (778, 1024), (819, 1024), (860, 1024), (901, 1024),\n                          (942, 1024), (983, 1024), (1024, 1024)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }],\n                  [{\n                      'type': 'Resize',\n                      'img_scale': [(512, 1024), (640, 1024), (768, 1024)],\n                      'multiscale_mode': 'value',\n                      'keep_ratio': True\n                  }, {\n                      'type': 'RandomCrop',\n                      'crop_type': 'absolute_range',\n                      'crop_size': (256, 256),\n                      'allow_negative_crop': True\n                  }, {\n                      'type':\n                      'Resize',\n                      'img_scale': [(614, 1024), (655, 1024), (696, 1024),\n                                    (737, 1024), (778, 1024), (819, 1024),\n                                    (860, 1024), (901, 1024), (942, 1024),\n                                    (983, 1024), (1024, 1024)],\n                      'multiscale_mode':\n                      'value',\n                      'override':\n                      True,\n                      'keep_ratio':\n                      True\n                  }]]),\n    dict(\n        type='Normalize',\n        mean=[127.49413776397705, 127.43779182434082, 127.46098327636719],\n        std=[73.86627551077616, 73.88234865304638, 73.8944344154546],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[\n                    127.49413776397705, 127.43779182434082, 127.46098327636719\n                ],\n                std=[73.86627551077616, 73.88234865304638, 73.8944344154546],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=7,\n    workers_per_gpu=3,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_train_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=False),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='AutoAugment',\n                policies=[[{\n                    'type':\n                    'Resize',\n                    'img_scale': [(614, 1024), (655, 1024), (696, 1024),\n                                  (737, 1024), (778, 1024), (819, 1024),\n                                  (860, 1024), (901, 1024), (942, 1024),\n                                  (983, 1024), (1024, 1024)],\n                    'multiscale_mode':\n                    'value',\n                    'keep_ratio':\n                    True\n                }],\n                          [{\n                              'type': 'Resize',\n                              'img_scale': [(512, 1024), (640, 1024),\n                                            (768, 1024)],\n                              'multiscale_mode': 'value',\n                              'keep_ratio': True\n                          }, {\n                              'type': 'RandomCrop',\n                              'crop_type': 'absolute_range',\n                              'crop_size': (256, 256),\n                              'allow_negative_crop': True\n                          }, {\n                              'type':\n                              'Resize',\n                              'img_scale': [(614, 1024), (655, 1024),\n                                            (696, 1024), (737, 1024),\n                                            (778, 1024), (819, 1024),\n                                            (860, 1024), (901, 1024),\n                                            (942, 1024), (983, 1024),\n                                            (1024, 1024)],\n                              'multiscale_mode':\n                              'value',\n                              'override':\n                              True,\n                              'keep_ratio':\n                              True\n                          }]]),\n            dict(\n                type='Normalize',\n                mean=[\n                    127.49413776397705, 127.43779182434082, 127.46098327636719\n                ],\n                std=[73.86627551077616, 73.88234865304638, 73.8944344154546],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_val_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[\n                            127.49413776397705, 127.43779182434082,\n                            127.46098327636719\n                        ],\n                        std=[\n                            73.86627551077616, 73.88234865304638,\n                            73.8944344154546\n                        ],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[\n                            127.49413776397705, 127.43779182434082,\n                            127.46098327636719\n                        ],\n                        std=[\n                            73.86627551077616, 73.88234865304638,\n                            73.8944344154546\n                        ],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(\n    interval=1, metric='bbox', classwise=True, save_best='bbox_mAP_50')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=36)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook', interval=100),\n        dict(\n            type='WandbLoggerHook',\n            interval=100,\n            init_kwargs=dict(\n                project='objectdetection', name='dynamic_head_ATSS_f5'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 6, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\n        )),\n    neck=[\n        dict(\n            type='FPN',\n            in_channels=[96, 192, 384, 768],\n            out_channels=256,\n            start_level=1,\n            add_extra_convs='on_output',\n            num_outs=5),\n        dict(\n            type='DyHead',\n            in_channels=256,\n            out_channels=256,\n            num_blocks=6,\n            zero_init_offset=False)\n    ],\n    bbox_head=dict(\n        type='ATSSHead',\n        num_classes=10,\n        in_channels=256,\n        pred_kernel_size=1,\n        stacked_convs=0,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128],\n            center_offset=0.5),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/dynamic/5'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2022, "exp_name": "myconfig.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 25403, "data_time": 0.04336, "loss_cls": 1.06166, "loss_bbox": 1.09169, "loss_centerness": 0.65412, "loss": 2.80747, "time": 3.99868}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 4e-05, "memory": 25403, "data_time": 0.01787, "loss_cls": 0.81846, "loss_bbox": 1.03864, "loss_centerness": 0.63493, "loss": 2.49204, "time": 3.97571}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 6e-05, "memory": 25403, "data_time": 0.0189, "loss_cls": 0.65709, "loss_bbox": 1.00321, "loss_centerness": 0.62992, "loss": 2.29022, "time": 3.96093}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 8e-05, "memory": 25403, "data_time": 0.01877, "loss_cls": 0.63802, "loss_bbox": 0.91944, "loss_centerness": 0.6301, "loss": 2.18756, "time": 3.98942}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01794, "loss_cls": 0.60717, "loss_bbox": 0.84243, "loss_centerness": 0.62759, "loss": 2.07719, "time": 2.48594}
{"mode": "val", "epoch": 1, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.019, "bbox_mAP_50": 0.045, "bbox_mAP_75": 0.013, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.025, "bbox_mAP_copypaste": "0.019 0.045 0.013 0.000 0.003 0.025"}
{"mode": "val", "epoch": 1, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03434, "loss_cls": 0.59079, "loss_bbox": 0.7842, "loss_centerness": 0.62782, "loss": 2.00281, "time": 0.57878}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.0437, "loss_cls": 0.58454, "loss_bbox": 0.77229, "loss_centerness": 0.62547, "loss": 1.9823, "time": 2.34853}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01812, "loss_cls": 0.59341, "loss_bbox": 0.75451, "loss_centerness": 0.62577, "loss": 1.97369, "time": 2.32156}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01841, "loss_cls": 0.56707, "loss_bbox": 0.70946, "loss_centerness": 0.62497, "loss": 1.9015, "time": 2.31466}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01842, "loss_cls": 0.5516, "loss_bbox": 0.65518, "loss_centerness": 0.62127, "loss": 1.82806, "time": 2.31772}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01826, "loss_cls": 0.53379, "loss_bbox": 0.64375, "loss_centerness": 0.62155, "loss": 1.79908, "time": 2.29778}
{"mode": "val", "epoch": 2, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.039, "bbox_mAP_50": 0.069, "bbox_mAP_75": 0.04, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.006, "bbox_mAP_l": 0.048, "bbox_mAP_copypaste": "0.039 0.069 0.040 0.009 0.006 0.048"}
{"mode": "val", "epoch": 2, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03382, "loss_cls": 0.52043, "loss_bbox": 0.61958, "loss_centerness": 0.62036, "loss": 1.76038, "time": 0.57758}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04355, "loss_cls": 0.53149, "loss_bbox": 0.61554, "loss_centerness": 0.62004, "loss": 1.76707, "time": 2.35036}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01823, "loss_cls": 0.5333, "loss_bbox": 0.62642, "loss_centerness": 0.62142, "loss": 1.78114, "time": 2.32466}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01818, "loss_cls": 0.5188, "loss_bbox": 0.61003, "loss_centerness": 0.61894, "loss": 1.74777, "time": 2.31634}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01849, "loss_cls": 0.51919, "loss_bbox": 0.59137, "loss_centerness": 0.61838, "loss": 1.72894, "time": 2.31837}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.0184, "loss_cls": 0.52373, "loss_bbox": 0.59481, "loss_centerness": 0.61904, "loss": 1.73758, "time": 2.29995}
{"mode": "val", "epoch": 3, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.046, "bbox_mAP_50": 0.076, "bbox_mAP_75": 0.049, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.009, "bbox_mAP_l": 0.058, "bbox_mAP_copypaste": "0.046 0.076 0.049 0.000 0.009 0.058"}
{"mode": "val", "epoch": 3, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03369, "loss_cls": 0.51766, "loss_bbox": 0.57116, "loss_centerness": 0.61831, "loss": 1.70713, "time": 0.57724}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04324, "loss_cls": 0.5143, "loss_bbox": 0.57693, "loss_centerness": 0.61741, "loss": 1.70864, "time": 2.34892}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01769, "loss_cls": 0.5112, "loss_bbox": 0.58112, "loss_centerness": 0.61873, "loss": 1.71105, "time": 2.32305}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01811, "loss_cls": 0.50949, "loss_bbox": 0.55816, "loss_centerness": 0.61767, "loss": 1.68531, "time": 2.31941}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01837, "loss_cls": 0.51006, "loss_bbox": 0.56067, "loss_centerness": 0.61806, "loss": 1.68879, "time": 2.31917}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01869, "loss_cls": 0.49865, "loss_bbox": 0.53151, "loss_centerness": 0.6161, "loss": 1.64626, "time": 2.29841}
{"mode": "val", "epoch": 4, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.049, "bbox_mAP_50": 0.083, "bbox_mAP_75": 0.051, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.013, "bbox_mAP_l": 0.061, "bbox_mAP_copypaste": "0.049 0.083 0.051 0.000 0.013 0.061"}
{"mode": "val", "epoch": 4, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03436, "loss_cls": 0.49781, "loss_bbox": 0.52534, "loss_centerness": 0.61426, "loss": 1.63742, "time": 0.57795}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04367, "loss_cls": 0.48867, "loss_bbox": 0.54224, "loss_centerness": 0.61646, "loss": 1.64737, "time": 2.3514}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01831, "loss_cls": 0.48885, "loss_bbox": 0.51091, "loss_centerness": 0.61414, "loss": 1.6139, "time": 2.32357}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01868, "loss_cls": 0.49052, "loss_bbox": 0.53247, "loss_centerness": 0.61531, "loss": 1.6383, "time": 2.31673}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01916, "loss_cls": 0.50248, "loss_bbox": 0.54837, "loss_centerness": 0.61675, "loss": 1.6676, "time": 2.32181}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01926, "loss_cls": 0.48916, "loss_bbox": 0.51656, "loss_centerness": 0.61411, "loss": 1.61983, "time": 2.29842}
{"mode": "val", "epoch": 5, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.067, "bbox_mAP_50": 0.105, "bbox_mAP_75": 0.074, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.015, "bbox_mAP_l": 0.083, "bbox_mAP_copypaste": "0.067 0.105 0.074 0.000 0.015 0.083"}
{"mode": "val", "epoch": 5, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03414, "loss_cls": 0.49735, "loss_bbox": 0.52723, "loss_centerness": 0.61462, "loss": 1.6392, "time": 0.57831}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04337, "loss_cls": 0.49963, "loss_bbox": 0.53257, "loss_centerness": 0.61514, "loss": 1.64734, "time": 2.34711}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01823, "loss_cls": 0.48305, "loss_bbox": 0.51565, "loss_centerness": 0.61444, "loss": 1.61313, "time": 2.3225}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01835, "loss_cls": 0.49117, "loss_bbox": 0.52194, "loss_centerness": 0.61254, "loss": 1.62566, "time": 2.31421}
{"mode": "train", "epoch": 6, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01838, "loss_cls": 0.472, "loss_bbox": 0.50561, "loss_centerness": 0.61293, "loss": 1.59054, "time": 2.31752}
{"mode": "train", "epoch": 6, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01828, "loss_cls": 0.48544, "loss_bbox": 0.50817, "loss_centerness": 0.61224, "loss": 1.60585, "time": 2.29585}
{"mode": "val", "epoch": 6, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.091, "bbox_mAP_50": 0.143, "bbox_mAP_75": 0.097, "bbox_mAP_s": 0.022, "bbox_mAP_m": 0.022, "bbox_mAP_l": 0.112, "bbox_mAP_copypaste": "0.091 0.143 0.097 0.022 0.022 0.112"}
{"mode": "val", "epoch": 6, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.0343, "loss_cls": 0.45609, "loss_bbox": 0.49697, "loss_centerness": 0.61356, "loss": 1.56663, "time": 0.57807}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04382, "loss_cls": 0.46886, "loss_bbox": 0.50078, "loss_centerness": 0.61352, "loss": 1.58316, "time": 2.34571}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01823, "loss_cls": 0.47895, "loss_bbox": 0.51593, "loss_centerness": 0.6129, "loss": 1.60777, "time": 2.32034}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01807, "loss_cls": 0.45216, "loss_bbox": 0.50097, "loss_centerness": 0.61364, "loss": 1.56677, "time": 2.31542}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01818, "loss_cls": 0.456, "loss_bbox": 0.47178, "loss_centerness": 0.61124, "loss": 1.53902, "time": 2.31677}
{"mode": "train", "epoch": 7, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01851, "loss_cls": 0.45957, "loss_bbox": 0.49648, "loss_centerness": 0.61298, "loss": 1.56903, "time": 2.29774}
{"mode": "val", "epoch": 7, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.1, "bbox_mAP_50": 0.152, "bbox_mAP_75": 0.105, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.02, "bbox_mAP_l": 0.122, "bbox_mAP_copypaste": "0.100 0.152 0.105 0.003 0.020 0.122"}
{"mode": "val", "epoch": 7, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03445, "loss_cls": 0.45273, "loss_bbox": 0.47983, "loss_centerness": 0.6122, "loss": 1.54476, "time": 0.57769}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04424, "loss_cls": 0.43947, "loss_bbox": 0.48521, "loss_centerness": 0.61155, "loss": 1.53623, "time": 2.34828}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01826, "loss_cls": 0.45297, "loss_bbox": 0.49937, "loss_centerness": 0.61229, "loss": 1.56463, "time": 2.32274}
{"mode": "train", "epoch": 8, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01821, "loss_cls": 0.46394, "loss_bbox": 0.50896, "loss_centerness": 0.61342, "loss": 1.58632, "time": 2.31488}
{"mode": "train", "epoch": 8, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01819, "loss_cls": 0.45326, "loss_bbox": 0.49005, "loss_centerness": 0.61151, "loss": 1.55482, "time": 2.31825}
{"mode": "train", "epoch": 8, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.0181, "loss_cls": 0.47746, "loss_bbox": 0.50693, "loss_centerness": 0.61374, "loss": 1.59813, "time": 2.2964}
{"mode": "val", "epoch": 8, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.113, "bbox_mAP_50": 0.172, "bbox_mAP_75": 0.123, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.029, "bbox_mAP_l": 0.139, "bbox_mAP_copypaste": "0.113 0.172 0.123 0.010 0.029 0.139"}
{"mode": "val", "epoch": 8, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03512, "loss_cls": 0.44282, "loss_bbox": 0.48817, "loss_centerness": 0.61244, "loss": 1.54343, "time": 0.57994}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04583, "loss_cls": 0.43991, "loss_bbox": 0.47556, "loss_centerness": 0.61069, "loss": 1.52616, "time": 2.35302}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01888, "loss_cls": 0.44256, "loss_bbox": 0.47751, "loss_centerness": 0.61223, "loss": 1.5323, "time": 2.32261}
{"mode": "train", "epoch": 9, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01907, "loss_cls": 0.45219, "loss_bbox": 0.48995, "loss_centerness": 0.61126, "loss": 1.55341, "time": 2.31748}
{"mode": "train", "epoch": 9, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01861, "loss_cls": 0.46135, "loss_bbox": 0.48354, "loss_centerness": 0.61181, "loss": 1.5567, "time": 2.31876}
{"mode": "train", "epoch": 9, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01877, "loss_cls": 0.4551, "loss_bbox": 0.50127, "loss_centerness": 0.61347, "loss": 1.56984, "time": 2.29845}
{"mode": "val", "epoch": 9, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.13, "bbox_mAP_50": 0.195, "bbox_mAP_75": 0.141, "bbox_mAP_s": 0.018, "bbox_mAP_m": 0.029, "bbox_mAP_l": 0.16, "bbox_mAP_copypaste": "0.130 0.195 0.141 0.018 0.029 0.160"}
{"mode": "val", "epoch": 9, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03487, "loss_cls": 0.44069, "loss_bbox": 0.46961, "loss_centerness": 0.61157, "loss": 1.52187, "time": 0.57796}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04436, "loss_cls": 0.47273, "loss_bbox": 0.51759, "loss_centerness": 0.61513, "loss": 1.60545, "time": 2.34863}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01864, "loss_cls": 0.46368, "loss_bbox": 0.47264, "loss_centerness": 0.61104, "loss": 1.54735, "time": 2.32126}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.0181, "loss_cls": 0.46063, "loss_bbox": 0.48219, "loss_centerness": 0.61229, "loss": 1.5551, "time": 2.31438}
{"mode": "train", "epoch": 10, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01853, "loss_cls": 0.43248, "loss_bbox": 0.48041, "loss_centerness": 0.61184, "loss": 1.52473, "time": 2.31916}
{"mode": "train", "epoch": 10, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01826, "loss_cls": 0.43775, "loss_bbox": 0.45827, "loss_centerness": 0.60953, "loss": 1.50555, "time": 2.29592}
{"mode": "val", "epoch": 10, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.144, "bbox_mAP_50": 0.212, "bbox_mAP_75": 0.155, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.026, "bbox_mAP_l": 0.176, "bbox_mAP_copypaste": "0.144 0.212 0.155 0.010 0.026 0.176"}
{"mode": "val", "epoch": 10, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03557, "loss_cls": 0.42609, "loss_bbox": 0.45333, "loss_centerness": 0.60895, "loss": 1.48837, "time": 0.58492}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04382, "loss_cls": 0.4248, "loss_bbox": 0.45753, "loss_centerness": 0.60951, "loss": 1.49184, "time": 2.34707}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01824, "loss_cls": 0.43449, "loss_bbox": 0.46671, "loss_centerness": 0.61049, "loss": 1.5117, "time": 2.31906}
{"mode": "train", "epoch": 11, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01852, "loss_cls": 0.43246, "loss_bbox": 0.45502, "loss_centerness": 0.60984, "loss": 1.49732, "time": 2.31554}
{"mode": "train", "epoch": 11, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01856, "loss_cls": 0.42608, "loss_bbox": 0.45536, "loss_centerness": 0.61027, "loss": 1.49171, "time": 2.31914}
{"mode": "train", "epoch": 11, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01849, "loss_cls": 0.42748, "loss_bbox": 0.46141, "loss_centerness": 0.61208, "loss": 1.50097, "time": 2.298}
{"mode": "val", "epoch": 11, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.157, "bbox_mAP_50": 0.234, "bbox_mAP_75": 0.169, "bbox_mAP_s": 0.012, "bbox_mAP_m": 0.051, "bbox_mAP_l": 0.192, "bbox_mAP_copypaste": "0.157 0.234 0.169 0.012 0.051 0.192"}
{"mode": "val", "epoch": 11, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.0351, "loss_cls": 0.42225, "loss_bbox": 0.46303, "loss_centerness": 0.61016, "loss": 1.49544, "time": 0.57838}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04452, "loss_cls": 0.41614, "loss_bbox": 0.44683, "loss_centerness": 0.60845, "loss": 1.47141, "time": 2.35162}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01887, "loss_cls": 0.4249, "loss_bbox": 0.44853, "loss_centerness": 0.61038, "loss": 1.48381, "time": 2.32223}
{"mode": "train", "epoch": 12, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01858, "loss_cls": 0.4251, "loss_bbox": 0.45052, "loss_centerness": 0.60925, "loss": 1.48488, "time": 2.31415}
{"mode": "train", "epoch": 12, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01862, "loss_cls": 0.43724, "loss_bbox": 0.45406, "loss_centerness": 0.60831, "loss": 1.49961, "time": 2.31864}
{"mode": "train", "epoch": 12, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01882, "loss_cls": 0.42295, "loss_bbox": 0.45539, "loss_centerness": 0.61008, "loss": 1.48842, "time": 2.29824}
{"mode": "val", "epoch": 12, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.16, "bbox_mAP_50": 0.234, "bbox_mAP_75": 0.176, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.052, "bbox_mAP_l": 0.195, "bbox_mAP_copypaste": "0.160 0.234 0.176 0.008 0.052 0.195"}
{"mode": "val", "epoch": 12, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03496, "loss_cls": 0.42489, "loss_bbox": 0.44938, "loss_centerness": 0.60984, "loss": 1.48411, "time": 0.57787}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04409, "loss_cls": 0.41332, "loss_bbox": 0.45037, "loss_centerness": 0.60985, "loss": 1.47354, "time": 2.34907}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01892, "loss_cls": 0.41058, "loss_bbox": 0.43776, "loss_centerness": 0.60949, "loss": 1.45783, "time": 2.32639}
{"mode": "train", "epoch": 13, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01825, "loss_cls": 0.41108, "loss_bbox": 0.43703, "loss_centerness": 0.6088, "loss": 1.45691, "time": 2.31466}
{"mode": "train", "epoch": 13, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01866, "loss_cls": 0.40612, "loss_bbox": 0.44064, "loss_centerness": 0.60705, "loss": 1.45382, "time": 2.31797}
{"mode": "train", "epoch": 13, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01839, "loss_cls": 0.42828, "loss_bbox": 0.44789, "loss_centerness": 0.60877, "loss": 1.48494, "time": 2.29614}
{"mode": "val", "epoch": 13, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.166, "bbox_mAP_50": 0.25, "bbox_mAP_75": 0.18, "bbox_mAP_s": 0.019, "bbox_mAP_m": 0.034, "bbox_mAP_l": 0.202, "bbox_mAP_copypaste": "0.166 0.250 0.180 0.019 0.034 0.202"}
{"mode": "val", "epoch": 13, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03485, "loss_cls": 0.41153, "loss_bbox": 0.45264, "loss_centerness": 0.6087, "loss": 1.47286, "time": 0.57917}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04399, "loss_cls": 0.4188, "loss_bbox": 0.42751, "loss_centerness": 0.60753, "loss": 1.45384, "time": 2.34572}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01845, "loss_cls": 0.44733, "loss_bbox": 0.45295, "loss_centerness": 0.60839, "loss": 1.50867, "time": 2.32128}
{"mode": "train", "epoch": 14, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01847, "loss_cls": 0.42897, "loss_bbox": 0.45019, "loss_centerness": 0.60941, "loss": 1.48858, "time": 2.3133}
{"mode": "train", "epoch": 14, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.0185, "loss_cls": 0.39979, "loss_bbox": 0.43544, "loss_centerness": 0.60839, "loss": 1.44363, "time": 2.31741}
{"mode": "train", "epoch": 14, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01862, "loss_cls": 0.39625, "loss_bbox": 0.43616, "loss_centerness": 0.60891, "loss": 1.44131, "time": 2.29715}
{"mode": "val", "epoch": 14, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.174, "bbox_mAP_50": 0.252, "bbox_mAP_75": 0.191, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.036, "bbox_mAP_l": 0.214, "bbox_mAP_copypaste": "0.174 0.252 0.191 0.025 0.036 0.214"}
{"mode": "val", "epoch": 14, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03647, "loss_cls": 0.40906, "loss_bbox": 0.43789, "loss_centerness": 0.60946, "loss": 1.45641, "time": 0.58568}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.0441, "loss_cls": 0.40503, "loss_bbox": 0.43718, "loss_centerness": 0.60811, "loss": 1.45032, "time": 2.34921}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 0.0001, "memory": 25403, "data_time": 0.01918, "loss_cls": 0.42007, "loss_bbox": 0.41416, "loss_centerness": 0.60716, "loss": 1.44139, "time": 2.32166}
{"mode": "train", "epoch": 15, "iter": 300, "lr": 0.0001, "memory": 25403, "data_time": 0.01947, "loss_cls": 0.41567, "loss_bbox": 0.4386, "loss_centerness": 0.60762, "loss": 1.46189, "time": 2.31932}
{"mode": "train", "epoch": 15, "iter": 400, "lr": 0.0001, "memory": 25403, "data_time": 0.01917, "loss_cls": 0.40388, "loss_bbox": 0.44491, "loss_centerness": 0.6102, "loss": 1.459, "time": 2.31761}
{"mode": "train", "epoch": 15, "iter": 500, "lr": 0.0001, "memory": 25403, "data_time": 0.01916, "loss_cls": 0.39761, "loss_bbox": 0.41696, "loss_centerness": 0.60742, "loss": 1.42199, "time": 2.29765}
{"mode": "val", "epoch": 15, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.173, "bbox_mAP_50": 0.246, "bbox_mAP_75": 0.188, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.035, "bbox_mAP_l": 0.211, "bbox_mAP_copypaste": "0.173 0.246 0.188 0.010 0.035 0.211"}
{"mode": "val", "epoch": 15, "iter": 140, "lr": 0.0001, "memory": 25403, "data_time": 0.03503, "loss_cls": 0.43012, "loss_bbox": 0.43219, "loss_centerness": 0.60974, "loss": 1.47205, "time": 0.57867}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.0001, "memory": 25403, "data_time": 0.04439, "loss_cls": 0.40318, "loss_bbox": 0.44098, "loss_centerness": 0.60946, "loss": 1.45362, "time": 2.34633}
