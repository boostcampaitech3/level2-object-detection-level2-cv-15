{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+6ddbff8", "config": "dataset_type = 'CocoDataset'\ndata_root = '../dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=768,\n        width=768,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=768,\n                width=768,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nvalid_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=True,\n        flip_direction=['horizontal', 'vertical', 'diagonal'],\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=10,\n    workers_per_gpu=3,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_train_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=768,\n                        width=768,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_val_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=True,\n                flip_direction=['horizontal', 'vertical', 'diagonal'],\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=36)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook', interval=100),\n        dict(\n            type='WandbLoggerHook',\n            interval=100,\n            init_kwargs=dict(\n                project='objectdetection', name='dynamic_head_ATSS_f5'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=[\n        dict(\n            type='FPN',\n            in_channels=[96, 192, 384, 768],\n            out_channels=256,\n            start_level=1,\n            add_extra_convs='on_output',\n            num_outs=5),\n        dict(\n            type='DyHead',\n            in_channels=256,\n            out_channels=256,\n            num_blocks=6,\n            zero_init_offset=False)\n    ],\n    bbox_head=dict(\n        type='ATSSHead',\n        num_classes=10,\n        in_channels=256,\n        pred_kernel_size=1,\n        stacked_convs=0,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128],\n            center_offset=0.5),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/dynamic/5'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2022, "exp_name": "myconfig.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 28625, "data_time": 0.04545, "loss_cls": 1.05201, "loss_bbox": 1.03628, "loss_centerness": 0.65516, "loss": 2.74345, "time": 2.66152}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 4e-05, "memory": 28625, "data_time": 0.01757, "loss_cls": 0.78168, "loss_bbox": 1.01705, "loss_centerness": 0.63696, "loss": 2.43569, "time": 2.62798}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 6e-05, "memory": 28625, "data_time": 0.01727, "loss_cls": 0.59879, "loss_bbox": 0.94432, "loss_centerness": 0.63124, "loss": 2.17435, "time": 2.62246}
{"mode": "val", "epoch": 1, "iter": 975, "lr": 8e-05, "bbox_mAP": 0.026, "bbox_mAP_50": 0.061, "bbox_mAP_75": 0.018, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.005, "bbox_mAP_l": 0.033, "bbox_mAP_copypaste": "0.026 0.061 0.018 0.000 0.005 0.033"}
{"mode": "val", "epoch": 1, "iter": 98, "lr": 8e-05, "memory": 28625, "data_time": 0.04543, "loss_cls": 0.52851, "loss_bbox": 0.79861, "loss_centerness": 0.63237, "loss": 1.95949, "time": 0.6701}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 28625, "data_time": 0.04757, "loss_cls": 0.54148, "loss_bbox": 0.74153, "loss_centerness": 0.6263, "loss": 1.90932, "time": 2.6567}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 28625, "data_time": 0.01964, "loss_cls": 0.52094, "loss_bbox": 0.71718, "loss_centerness": 0.62578, "loss": 1.86391, "time": 2.62803}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 28625, "data_time": 0.01921, "loss_cls": 0.52383, "loss_bbox": 0.70653, "loss_centerness": 0.62635, "loss": 1.85671, "time": 2.62662}
{"mode": "val", "epoch": 2, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.057, "bbox_mAP_50": 0.117, "bbox_mAP_75": 0.051, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.01, "bbox_mAP_l": 0.07, "bbox_mAP_copypaste": "0.057 0.117 0.051 0.008 0.010 0.070"}
{"mode": "val", "epoch": 2, "iter": 98, "lr": 0.0001, "memory": 28625, "data_time": 0.04586, "loss_cls": 0.48602, "loss_bbox": 0.66066, "loss_centerness": 0.62549, "loss": 1.77217, "time": 0.67062}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "memory": 28625, "data_time": 0.04783, "loss_cls": 0.47796, "loss_bbox": 0.63564, "loss_centerness": 0.62283, "loss": 1.73643, "time": 2.65819}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 28625, "data_time": 0.01874, "loss_cls": 0.46441, "loss_bbox": 0.61781, "loss_centerness": 0.62206, "loss": 1.70428, "time": 2.62584}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0001, "memory": 28625, "data_time": 0.01883, "loss_cls": 0.46992, "loss_bbox": 0.60665, "loss_centerness": 0.62129, "loss": 1.69786, "time": 2.62614}
{"mode": "val", "epoch": 3, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.091, "bbox_mAP_50": 0.16, "bbox_mAP_75": 0.097, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.019, "bbox_mAP_l": 0.113, "bbox_mAP_copypaste": "0.091 0.160 0.097 0.004 0.019 0.113"}
{"mode": "val", "epoch": 3, "iter": 98, "lr": 0.0001, "memory": 28625, "data_time": 0.04625, "loss_cls": 0.44873, "loss_bbox": 0.57413, "loss_centerness": 0.61989, "loss": 1.64275, "time": 0.67064}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0001, "memory": 28625, "data_time": 0.04762, "loss_cls": 0.42937, "loss_bbox": 0.57813, "loss_centerness": 0.62053, "loss": 1.62802, "time": 2.66058}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0001, "memory": 28625, "data_time": 0.01891, "loss_cls": 0.43939, "loss_bbox": 0.54304, "loss_centerness": 0.6175, "loss": 1.59993, "time": 2.62839}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 28625, "data_time": 0.01926, "loss_cls": 0.43074, "loss_bbox": 0.5477, "loss_centerness": 0.61618, "loss": 1.59461, "time": 2.62718}
{"mode": "val", "epoch": 4, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.127, "bbox_mAP_50": 0.201, "bbox_mAP_75": 0.139, "bbox_mAP_s": 0.014, "bbox_mAP_m": 0.022, "bbox_mAP_l": 0.156, "bbox_mAP_copypaste": "0.127 0.201 0.139 0.014 0.022 0.156"}
{"mode": "val", "epoch": 4, "iter": 98, "lr": 0.0001, "memory": 28625, "data_time": 0.04659, "loss_cls": 0.43119, "loss_bbox": 0.52758, "loss_centerness": 0.61751, "loss": 1.57628, "time": 0.67414}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0001, "memory": 28625, "data_time": 0.04822, "loss_cls": 0.41175, "loss_bbox": 0.53212, "loss_centerness": 0.61546, "loss": 1.55933, "time": 2.65698}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "memory": 28625, "data_time": 0.01924, "loss_cls": 0.40718, "loss_bbox": 0.51386, "loss_centerness": 0.61462, "loss": 1.53567, "time": 2.6278}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0001, "memory": 28625, "data_time": 0.01904, "loss_cls": 0.40417, "loss_bbox": 0.50557, "loss_centerness": 0.6141, "loss": 1.52384, "time": 2.63092}
{"mode": "val", "epoch": 5, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.141, "bbox_mAP_50": 0.223, "bbox_mAP_75": 0.153, "bbox_mAP_s": 0.013, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.171, "bbox_mAP_copypaste": "0.141 0.223 0.153 0.013 0.055 0.171"}
{"mode": "val", "epoch": 5, "iter": 98, "lr": 0.0001, "memory": 28625, "data_time": 0.04681, "loss_cls": 0.42283, "loss_bbox": 0.51074, "loss_centerness": 0.6151, "loss": 1.54867, "time": 0.67263}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.0001, "memory": 28625, "data_time": 0.04788, "loss_cls": 0.39657, "loss_bbox": 0.51044, "loss_centerness": 0.61414, "loss": 1.52114, "time": 2.65729}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.0001, "memory": 28625, "data_time": 0.01935, "loss_cls": 0.39149, "loss_bbox": 0.50342, "loss_centerness": 0.61416, "loss": 1.50907, "time": 2.62835}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.0001, "memory": 28625, "data_time": 0.01934, "loss_cls": 0.39654, "loss_bbox": 0.49038, "loss_centerness": 0.61362, "loss": 1.50054, "time": 2.62967}
{"mode": "val", "epoch": 6, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.165, "bbox_mAP_50": 0.266, "bbox_mAP_75": 0.18, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.067, "bbox_mAP_l": 0.198, "bbox_mAP_copypaste": "0.165 0.266 0.180 0.009 0.067 0.198"}
{"mode": "val", "epoch": 6, "iter": 98, "lr": 0.0001, "memory": 28625, "data_time": 0.0461, "loss_cls": 0.39943, "loss_bbox": 0.52413, "loss_centerness": 0.61458, "loss": 1.53814, "time": 0.67178}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.0001, "memory": 28625, "data_time": 0.0479, "loss_cls": 0.39169, "loss_bbox": 0.48033, "loss_centerness": 0.61144, "loss": 1.48346, "time": 2.65498}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.0001, "memory": 28625, "data_time": 0.01896, "loss_cls": 0.39056, "loss_bbox": 0.46948, "loss_centerness": 0.61311, "loss": 1.47314, "time": 2.62585}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.0001, "memory": 28625, "data_time": 0.01891, "loss_cls": 0.39466, "loss_bbox": 0.49124, "loss_centerness": 0.61343, "loss": 1.49933, "time": 2.62551}
{"mode": "val", "epoch": 7, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.168, "bbox_mAP_50": 0.257, "bbox_mAP_75": 0.185, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.057, "bbox_mAP_l": 0.202, "bbox_mAP_copypaste": "0.168 0.257 0.185 0.010 0.057 0.202"}
{"mode": "val", "epoch": 7, "iter": 98, "lr": 0.0001, "memory": 28625, "data_time": 0.04644, "loss_cls": 0.4012, "loss_bbox": 0.49132, "loss_centerness": 0.61369, "loss": 1.5062, "time": 0.67121}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.0001, "memory": 28625, "data_time": 0.04756, "loss_cls": 0.38104, "loss_bbox": 0.46318, "loss_centerness": 0.61107, "loss": 1.45529, "time": 2.65146}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.0001, "memory": 28625, "data_time": 0.01912, "loss_cls": 0.36852, "loss_bbox": 0.45967, "loss_centerness": 0.61181, "loss": 1.44, "time": 2.62358}
{"mode": "train", "epoch": 8, "iter": 300, "lr": 0.0001, "memory": 28625, "data_time": 0.01921, "loss_cls": 0.36518, "loss_bbox": 0.46082, "loss_centerness": 0.61073, "loss": 1.43673, "time": 2.62795}
{"mode": "val", "epoch": 8, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.2, "bbox_mAP_50": 0.301, "bbox_mAP_75": 0.225, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.1, "bbox_mAP_l": 0.236, "bbox_mAP_copypaste": "0.200 0.301 0.225 0.009 0.100 0.236"}
{"mode": "val", "epoch": 8, "iter": 98, "lr": 0.0001, "memory": 28625, "data_time": 0.0467, "loss_cls": 0.39401, "loss_bbox": 0.46938, "loss_centerness": 0.61222, "loss": 1.47561, "time": 0.67223}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 28625, "data_time": 0.04819, "loss_cls": 0.34484, "loss_bbox": 0.41395, "loss_centerness": 0.60879, "loss": 1.36758, "time": 2.65165}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 1e-05, "memory": 28625, "data_time": 0.01988, "loss_cls": 0.33386, "loss_bbox": 0.41188, "loss_centerness": 0.6093, "loss": 1.35504, "time": 2.62955}
{"mode": "train", "epoch": 9, "iter": 300, "lr": 1e-05, "memory": 28625, "data_time": 0.01991, "loss_cls": 0.33505, "loss_bbox": 0.41059, "loss_centerness": 0.60926, "loss": 1.3549, "time": 2.62777}
{"mode": "val", "epoch": 9, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.265, "bbox_mAP_50": 0.368, "bbox_mAP_75": 0.285, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.089, "bbox_mAP_l": 0.314, "bbox_mAP_copypaste": "0.265 0.368 0.285 0.021 0.089 0.314"}
{"mode": "val", "epoch": 9, "iter": 98, "lr": 1e-05, "memory": 28625, "data_time": 0.04738, "loss_cls": 0.3594, "loss_bbox": 0.43259, "loss_centerness": 0.61175, "loss": 1.40373, "time": 0.67341}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 28625, "data_time": 0.04791, "loss_cls": 0.32063, "loss_bbox": 0.38423, "loss_centerness": 0.60725, "loss": 1.31211, "time": 2.65658}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 1e-05, "memory": 28625, "data_time": 0.01931, "loss_cls": 0.3269, "loss_bbox": 0.41275, "loss_centerness": 0.60883, "loss": 1.34848, "time": 2.6284}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 1e-05, "memory": 28625, "data_time": 0.01948, "loss_cls": 0.32045, "loss_bbox": 0.39839, "loss_centerness": 0.60779, "loss": 1.32662, "time": 2.62713}
{"mode": "val", "epoch": 10, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.279, "bbox_mAP_50": 0.383, "bbox_mAP_75": 0.296, "bbox_mAP_s": 0.017, "bbox_mAP_m": 0.095, "bbox_mAP_l": 0.33, "bbox_mAP_copypaste": "0.279 0.383 0.296 0.017 0.095 0.330"}
{"mode": "val", "epoch": 10, "iter": 98, "lr": 1e-05, "memory": 28625, "data_time": 0.04648, "loss_cls": 0.35846, "loss_bbox": 0.4286, "loss_centerness": 0.61132, "loss": 1.39838, "time": 0.67358}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 1e-05, "memory": 28625, "data_time": 0.04813, "loss_cls": 0.32245, "loss_bbox": 0.39932, "loss_centerness": 0.60879, "loss": 1.33057, "time": 2.65852}
