{"mmdet_version": "2.22.06ddbff8", "CLASSES": ["General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+6ddbff8", "config": "dataset_type = 'CocoDataset'\ndata_root = '../dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=768,\n        width=768,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=768,\n                width=768,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nvalid_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=True,\n        flip_direction=['horizontal', 'vertical', 'diagonal'],\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=14,\n    workers_per_gpu=3,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/opt/ml/detection/dataset_erase2/dataset/cv3_train_pseudo.json',\n        img_prefix='/opt/ml/detection/dataset_erase2/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=768,\n                        width=768,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset_erase2/dataset/cv_val_3.json',\n        img_prefix='/opt/ml/detection/dataset_erase2/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset_erase2/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset_erase2/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=True,\n                flip_direction=['horizontal', 'vertical', 'diagonal'],\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.005,\n    step=[32, 36])\nrunner = dict(type='EpochBasedRunner', max_epochs=40)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook', interval=100),\n        dict(\n            type='WandbLoggerHook',\n            interval=100,\n            init_kwargs=dict(\n                project='objectdetection', name='dynamic_head_ATSS_pseudo_f3'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 6, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\n        )),\n    neck=[\n        dict(\n            type='FPN',\n            in_channels=[96, 192, 384, 768],\n            out_channels=256,\n            start_level=1,\n            add_extra_convs='on_output',\n            num_outs=5),\n        dict(\n            type='DyHead',\n            in_channels=256,\n            out_channels=256,\n            num_blocks=6,\n            zero_init_offset=False)\n    ],\n    bbox_head=dict(\n        type='ATSSHead',\n        num_classes=10,\n        in_channels=256,\n        pred_kernel_size=1,\n        stacked_convs=0,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128],\n            center_offset=0.5),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\nwork_dir = './work_dirs/dynamic/3_pseudo'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2022, "exp_name": "myconfig.py", "epoch": 21, "iter": 13167, "mmcv_version": "1.4.8", "time": "Wed Apr  6 23:45:50 2022", "hook_msgs": {"last_ckpt": "/opt/ml/detection/baseline/mmdetection/work_dirs/dynamic/3_pseudo/epoch_20.pth"}}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 1e-05, "memory": 28243, "data_time": 0.05784, "loss_cls": 0.24041, "loss_bbox": 0.28482, "loss_centerness": 0.59801, "loss": 1.12323, "time": 3.11588}
{"mode": "train", "epoch": 22, "iter": 200, "lr": 1e-05, "memory": 28243, "data_time": 0.02451, "loss_cls": 0.22768, "loss_bbox": 0.27343, "loss_centerness": 0.59713, "loss": 1.09825, "time": 3.07637}
{"mode": "train", "epoch": 22, "iter": 300, "lr": 1e-05, "memory": 28243, "data_time": 0.02466, "loss_cls": 0.22649, "loss_bbox": 0.26599, "loss_centerness": 0.59683, "loss": 1.08931, "time": 3.07322}
{"mode": "train", "epoch": 22, "iter": 400, "lr": 1e-05, "memory": 28243, "data_time": 0.02434, "loss_cls": 0.22526, "loss_bbox": 0.26609, "loss_centerness": 0.59671, "loss": 1.08806, "time": 3.07332}
{"mode": "train", "epoch": 22, "iter": 500, "lr": 1e-05, "memory": 28243, "data_time": 0.02471, "loss_cls": 0.23722, "loss_bbox": 0.27761, "loss_centerness": 0.59749, "loss": 1.11232, "time": 3.07234}
{"mode": "train", "epoch": 22, "iter": 600, "lr": 1e-05, "memory": 28243, "data_time": 0.02439, "loss_cls": 0.22894, "loss_bbox": 0.25568, "loss_centerness": 0.59648, "loss": 1.0811, "time": 3.07319}
{"mode": "val", "epoch": 22, "iter": 972, "lr": 1e-05, "bbox_mAP": 0.461, "bbox_mAP_50": 0.596, "bbox_mAP_75": 0.495, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.187, "bbox_mAP_l": 0.543, "bbox_mAP_copypaste": "0.461 0.596 0.495 0.001 0.187 0.543"}
{"mode": "val", "epoch": 22, "iter": 70, "lr": 1e-05, "memory": 28243, "data_time": 0.07169, "loss_cls": 0.33203, "loss_bbox": 0.37739, "loss_centerness": 0.60612, "loss": 1.31554, "time": 0.78073}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 1e-05, "memory": 28243, "data_time": 0.05946, "loss_cls": 0.22271, "loss_bbox": 0.26959, "loss_centerness": 0.59748, "loss": 1.08977, "time": 3.10943}
{"mode": "train", "epoch": 23, "iter": 200, "lr": 1e-05, "memory": 28243, "data_time": 0.02585, "loss_cls": 0.21788, "loss_bbox": 0.26553, "loss_centerness": 0.59687, "loss": 1.08027, "time": 3.07569}
{"mode": "train", "epoch": 23, "iter": 300, "lr": 1e-05, "memory": 28243, "data_time": 0.02625, "loss_cls": 0.22569, "loss_bbox": 0.26019, "loss_centerness": 0.59706, "loss": 1.08294, "time": 3.07317}
{"mode": "train", "epoch": 23, "iter": 400, "lr": 1e-05, "memory": 28243, "data_time": 0.02569, "loss_cls": 0.2202, "loss_bbox": 0.24843, "loss_centerness": 0.59622, "loss": 1.06485, "time": 3.07258}
{"mode": "train", "epoch": 23, "iter": 500, "lr": 1e-05, "memory": 28243, "data_time": 0.02556, "loss_cls": 0.21675, "loss_bbox": 0.25834, "loss_centerness": 0.59616, "loss": 1.07125, "time": 3.07185}
{"mode": "train", "epoch": 23, "iter": 600, "lr": 1e-05, "memory": 28243, "data_time": 0.02625, "loss_cls": 0.21805, "loss_bbox": 0.2661, "loss_centerness": 0.5969, "loss": 1.08105, "time": 3.07412}
{"mode": "val", "epoch": 23, "iter": 972, "lr": 1e-05, "bbox_mAP": 0.463, "bbox_mAP_50": 0.599, "bbox_mAP_75": 0.496, "bbox_mAP_s": 0.002, "bbox_mAP_m": 0.192, "bbox_mAP_l": 0.547, "bbox_mAP_copypaste": "0.463 0.599 0.496 0.002 0.192 0.547"}
{"mode": "val", "epoch": 23, "iter": 70, "lr": 1e-05, "memory": 28243, "data_time": 0.07061, "loss_cls": 0.3264, "loss_bbox": 0.37063, "loss_centerness": 0.60659, "loss": 1.30362, "time": 0.77992}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 1e-05, "memory": 28243, "data_time": 0.05838, "loss_cls": 0.21577, "loss_bbox": 0.26157, "loss_centerness": 0.59659, "loss": 1.07393, "time": 3.10417}
{"mode": "train", "epoch": 24, "iter": 200, "lr": 1e-05, "memory": 28243, "data_time": 0.02531, "loss_cls": 0.21262, "loss_bbox": 0.24385, "loss_centerness": 0.59431, "loss": 1.05079, "time": 3.07122}
{"mode": "train", "epoch": 24, "iter": 300, "lr": 1e-05, "memory": 28243, "data_time": 0.02561, "loss_cls": 0.22194, "loss_bbox": 0.26642, "loss_centerness": 0.59664, "loss": 1.08501, "time": 3.07303}
{"mode": "train", "epoch": 24, "iter": 400, "lr": 1e-05, "memory": 28243, "data_time": 0.02516, "loss_cls": 0.20979, "loss_bbox": 0.24539, "loss_centerness": 0.59425, "loss": 1.04943, "time": 3.06931}
{"mode": "train", "epoch": 24, "iter": 500, "lr": 1e-05, "memory": 28243, "data_time": 0.0256, "loss_cls": 0.21715, "loss_bbox": 0.26161, "loss_centerness": 0.59625, "loss": 1.07501, "time": 3.07377}
{"mode": "train", "epoch": 24, "iter": 600, "lr": 1e-05, "memory": 28243, "data_time": 0.02534, "loss_cls": 0.21454, "loss_bbox": 0.2564, "loss_centerness": 0.59656, "loss": 1.06751, "time": 3.07067}
{"mode": "val", "epoch": 24, "iter": 972, "lr": 1e-05, "bbox_mAP": 0.469, "bbox_mAP_50": 0.603, "bbox_mAP_75": 0.496, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.199, "bbox_mAP_l": 0.552, "bbox_mAP_copypaste": "0.469 0.603 0.496 0.003 0.199 0.552"}
{"mode": "val", "epoch": 24, "iter": 70, "lr": 1e-05, "memory": 28243, "data_time": 0.07112, "loss_cls": 0.33591, "loss_bbox": 0.37961, "loss_centerness": 0.60744, "loss": 1.32296, "time": 0.78097}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 1e-05, "memory": 28243, "data_time": 0.05937, "loss_cls": 0.21308, "loss_bbox": 0.2654, "loss_centerness": 0.59781, "loss": 1.07629, "time": 3.10856}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 1e-05, "memory": 28243, "data_time": 0.02556, "loss_cls": 0.2054, "loss_bbox": 0.23942, "loss_centerness": 0.59513, "loss": 1.03995, "time": 3.07098}
{"mode": "train", "epoch": 25, "iter": 300, "lr": 1e-05, "memory": 28243, "data_time": 0.02593, "loss_cls": 0.22063, "loss_bbox": 0.26052, "loss_centerness": 0.59668, "loss": 1.07784, "time": 3.07201}
{"mode": "train", "epoch": 25, "iter": 400, "lr": 1e-05, "memory": 28243, "data_time": 0.02529, "loss_cls": 0.21385, "loss_bbox": 0.26133, "loss_centerness": 0.5965, "loss": 1.07168, "time": 3.07045}
{"mode": "train", "epoch": 25, "iter": 500, "lr": 1e-05, "memory": 28243, "data_time": 0.02595, "loss_cls": 0.20969, "loss_bbox": 0.24322, "loss_centerness": 0.59587, "loss": 1.04878, "time": 3.07387}
{"mode": "train", "epoch": 25, "iter": 600, "lr": 1e-05, "memory": 28243, "data_time": 0.02557, "loss_cls": 0.2167, "loss_bbox": 0.26204, "loss_centerness": 0.59645, "loss": 1.0752, "time": 3.07351}
{"mode": "val", "epoch": 25, "iter": 972, "lr": 1e-05, "bbox_mAP": 0.47, "bbox_mAP_50": 0.607, "bbox_mAP_75": 0.504, "bbox_mAP_s": 0.002, "bbox_mAP_m": 0.207, "bbox_mAP_l": 0.552, "bbox_mAP_copypaste": "0.470 0.607 0.504 0.002 0.207 0.552"}
{"mode": "val", "epoch": 25, "iter": 70, "lr": 1e-05, "memory": 28243, "data_time": 0.07008, "loss_cls": 0.32755, "loss_bbox": 0.37245, "loss_centerness": 0.60783, "loss": 1.30784, "time": 0.77834}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 1e-05, "memory": 28243, "data_time": 0.0585, "loss_cls": 0.21138, "loss_bbox": 0.24927, "loss_centerness": 0.59523, "loss": 1.05587, "time": 3.10626}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 1e-05, "memory": 28243, "data_time": 0.02562, "loss_cls": 0.21024, "loss_bbox": 0.25381, "loss_centerness": 0.59561, "loss": 1.05967, "time": 3.07368}
{"mode": "train", "epoch": 26, "iter": 300, "lr": 1e-05, "memory": 28243, "data_time": 0.02593, "loss_cls": 0.21399, "loss_bbox": 0.25718, "loss_centerness": 0.5964, "loss": 1.06757, "time": 3.07477}
{"mode": "train", "epoch": 26, "iter": 400, "lr": 1e-05, "memory": 28243, "data_time": 0.02631, "loss_cls": 0.20719, "loss_bbox": 0.24957, "loss_centerness": 0.59529, "loss": 1.05205, "time": 3.07346}
{"mode": "train", "epoch": 26, "iter": 500, "lr": 1e-05, "memory": 28243, "data_time": 0.02604, "loss_cls": 0.20724, "loss_bbox": 0.24833, "loss_centerness": 0.59579, "loss": 1.05135, "time": 3.07425}
{"mode": "train", "epoch": 26, "iter": 600, "lr": 1e-05, "memory": 28243, "data_time": 0.02567, "loss_cls": 0.20156, "loss_bbox": 0.23823, "loss_centerness": 0.59431, "loss": 1.0341, "time": 3.07116}
{"mode": "val", "epoch": 26, "iter": 972, "lr": 1e-05, "bbox_mAP": 0.475, "bbox_mAP_50": 0.609, "bbox_mAP_75": 0.507, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.185, "bbox_mAP_l": 0.561, "bbox_mAP_copypaste": "0.475 0.609 0.507 0.003 0.185 0.561"}
{"mode": "val", "epoch": 26, "iter": 70, "lr": 1e-05, "memory": 28243, "data_time": 0.071, "loss_cls": 0.32263, "loss_bbox": 0.37074, "loss_centerness": 0.60739, "loss": 1.30076, "time": 0.77888}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 1e-05, "memory": 28243, "data_time": 0.05859, "loss_cls": 0.20526, "loss_bbox": 0.24082, "loss_centerness": 0.59505, "loss": 1.04113, "time": 3.10835}
