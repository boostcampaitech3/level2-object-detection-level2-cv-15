{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+6ddbff8", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='PyramidVisionTransformerV2',\n        embed_dims=64,\n        num_layers=[3, 4, 18, 3],\n        init_cfg=dict(\n            checkpoint=\n            'https://github.com/whai362/PVT/releases/download/v2/pvt_v2_b3.pth'\n        )),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[64, 128, 320, 512],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.7, 1, 1.5],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=20,\n        sat_shift_limit=30,\n        val_shift_limit=20,\n        p=0.1),\n    dict(type='GaussNoise'),\n    dict(type='RandomRotate90', p=0.5)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=20,\n                sat_shift_limit=30,\n                val_shift_limit=20,\n                p=0.1),\n            dict(type='GaussNoise'),\n            dict(type='RandomRotate90', p=0.5)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(768, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_new_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=20,\n                        sat_shift_limit=30,\n                        val_shift_limit=20,\n                        p=0.1),\n                    dict(type='GaussNoise'),\n                    dict(type='RandomRotate90', p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_val_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(\n    interval=1, metric='bbox', save_best='bbox_mAP_50', classwise=True)\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=500,\n    hooks=[\n        dict(type='TextLoggerHook', interval=400),\n        dict(\n            type='WandbLoggerHook',\n            interval=200,\n            init_kwargs=dict(project='objectdetection', name='LIM_MM_testing'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\nwork_dir = './work_dirs/carscade_rcnn_pvt2_pafpn_1x_trash/Adamw_step_aug2_iou'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2022, "exp_name": "cascade_rcnn_pvt2_pafpn_1x_coco.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 8e-05, "memory": 8272, "data_time": 0.01246, "loss_rpn_cls": 0.19362, "loss_rpn_bbox": 0.04025, "s0.loss_cls": 0.40615, "s0.acc": 90.15137, "s0.loss_bbox": 0.08914, "s1.loss_cls": 0.13865, "s1.acc": 94.29919, "s1.loss_bbox": 0.03496, "s2.loss_cls": 0.05662, "s2.acc": 95.54517, "s2.loss_bbox": 0.00735, "loss": 0.96674, "time": 0.67845}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0001, "memory": 8272, "data_time": 0.0066, "loss_rpn_cls": 0.07509, "loss_rpn_bbox": 0.03166, "s0.loss_cls": 0.22208, "s0.acc": 94.65613, "s0.loss_bbox": 0.09368, "s1.loss_cls": 0.0957, "s1.acc": 95.29028, "s1.loss_bbox": 0.0647, "s2.loss_cls": 0.03894, "s2.acc": 96.16895, "s2.loss_bbox": 0.02773, "loss": 0.64958, "time": 0.6743}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.0001, "memory": 8272, "data_time": 0.00677, "loss_rpn_cls": 0.06197, "loss_rpn_bbox": 0.02709, "s0.loss_cls": 0.21418, "s0.acc": 94.4635, "s0.loss_bbox": 0.08655, "s1.loss_cls": 0.09994, "s1.acc": 94.64948, "s1.loss_bbox": 0.0671, "s2.loss_cls": 0.04327, "s2.acc": 95.31722, "s2.loss_bbox": 0.03154, "loss": 0.63163, "time": 0.67448}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.0001, "memory": 8272, "data_time": 0.0069, "loss_rpn_cls": 0.05572, "loss_rpn_bbox": 0.02425, "s0.loss_cls": 0.20313, "s0.acc": 94.58447, "s0.loss_bbox": 0.07855, "s1.loss_cls": 0.09911, "s1.acc": 94.47194, "s1.loss_bbox": 0.06464, "s2.loss_cls": 0.04404, "s2.acc": 95.0311, "s2.loss_bbox": 0.03081, "loss": 0.60026, "time": 0.67165}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.0001, "memory": 8272, "data_time": 0.00712, "loss_rpn_cls": 0.05251, "loss_rpn_bbox": 0.02294, "s0.loss_cls": 0.20364, "s0.acc": 94.57507, "s0.loss_bbox": 0.0724, "s1.loss_cls": 0.10203, "s1.acc": 94.2497, "s1.loss_bbox": 0.06085, "s2.loss_cls": 0.04738, "s2.acc": 94.52407, "s2.loss_bbox": 0.03138, "loss": 0.59313, "time": 0.67604}
{"mode": "val", "epoch": 1, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.185, "bbox_mAP_50": 0.302, "bbox_mAP_75": 0.192, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.093, "bbox_mAP_l": 0.222, "bbox_mAP_copypaste": "0.185 0.302 0.192 0.005 0.093 0.222"}
{"mode": "val", "epoch": 1, "iter": 244, "lr": 0.0001, "memory": 8272, "data_time": 0.01616, "loss_rpn_cls": 0.06871, "loss_rpn_bbox": 0.03715, "s0.loss_cls": 0.27438, "s0.acc": 91.8467, "s0.loss_bbox": 0.11576, "s1.loss_cls": 0.13767, "s1.acc": 91.54742, "s1.loss_bbox": 0.09587, "s2.loss_cls": 0.0628, "s2.acc": 92.24554, "s2.loss_bbox": 0.04772, "loss": 0.84005, "time": 0.26396}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 8272, "data_time": 0.01351, "loss_rpn_cls": 0.04811, "loss_rpn_bbox": 0.02071, "s0.loss_cls": 0.19339, "s0.acc": 94.6355, "s0.loss_bbox": 0.06839, "s1.loss_cls": 0.09996, "s1.acc": 94.24137, "s1.loss_bbox": 0.05862, "s2.loss_cls": 0.04729, "s2.acc": 94.42039, "s2.loss_bbox": 0.03095, "loss": 0.56743, "time": 0.68571}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.0001, "memory": 8272, "data_time": 0.00751, "loss_rpn_cls": 0.05593, "loss_rpn_bbox": 0.02516, "s0.loss_cls": 0.20293, "s0.acc": 94.38477, "s0.loss_bbox": 0.07238, "s1.loss_cls": 0.10343, "s1.acc": 93.94249, "s1.loss_bbox": 0.06122, "s2.loss_cls": 0.04904, "s2.acc": 94.13304, "s2.loss_bbox": 0.03211, "loss": 0.60219, "time": 0.6803}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.0001, "memory": 8272, "data_time": 0.00757, "loss_rpn_cls": 0.04459, "loss_rpn_bbox": 0.02126, "s0.loss_cls": 0.19061, "s0.acc": 94.57239, "s0.loss_bbox": 0.07088, "s1.loss_cls": 0.09958, "s1.acc": 94.09539, "s1.loss_bbox": 0.0604, "s2.loss_cls": 0.04736, "s2.acc": 94.20323, "s2.loss_bbox": 0.03101, "loss": 0.56568, "time": 0.68122}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.0001, "memory": 8272, "data_time": 0.00765, "loss_rpn_cls": 0.04479, "loss_rpn_bbox": 0.02194, "s0.loss_cls": 0.19683, "s0.acc": 94.37756, "s0.loss_bbox": 0.0701, "s1.loss_cls": 0.10185, "s1.acc": 93.90646, "s1.loss_bbox": 0.0601, "s2.loss_cls": 0.04877, "s2.acc": 94.05156, "s2.loss_bbox": 0.03084, "loss": 0.5752, "time": 0.68423}
