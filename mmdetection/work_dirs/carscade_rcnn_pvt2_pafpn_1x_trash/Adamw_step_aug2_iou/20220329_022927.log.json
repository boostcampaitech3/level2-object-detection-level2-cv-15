{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+6ddbff8", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='PyramidVisionTransformerV2',\n        embed_dims=64,\n        num_layers=[3, 4, 18, 3],\n        init_cfg=dict(\n            checkpoint=\n            'https://github.com/whai362/PVT/releases/download/v2/pvt_v2_b3.pth'\n        )),\n    neck=dict(\n        type='PAFPN',\n        in_channels=[64, 128, 320, 512],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.7, 1, 1.5],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=20,\n        sat_shift_limit=30,\n        val_shift_limit=20,\n        p=0.1),\n    dict(type='GaussNoise'),\n    dict(type='RandomRotate90', p=0.5)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=20,\n                sat_shift_limit=30,\n                val_shift_limit=20,\n                p=0.1),\n            dict(type='GaussNoise'),\n            dict(type='RandomRotate90', p=0.5)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(768, 768),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_train_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=20,\n                        sat_shift_limit=30,\n                        val_shift_limit=20,\n                        p=0.1),\n                    dict(type='GaussNoise'),\n                    dict(type='RandomRotate90', p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_val_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                 'Clothing')))\nevaluation = dict(\n    interval=1, metric='bbox', save_best='bbox_mAP_50', classwise=True)\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=500,\n    hooks=[\n        dict(type='TextLoggerHook', interval=400),\n        dict(\n            type='WandbLoggerHook',\n            interval=200,\n            init_kwargs=dict(\n                project='objectdetection',\n                name='MM_Cascade_RCNN_pvt2_pafpn_iou'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'\nwork_dir = './work_dirs/carscade_rcnn_pvt2_pafpn_1x_trash/Adamw_step_aug2_iou'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2022, "exp_name": "cascade_rcnn_pvt2_pafpn_1x_coco.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 8e-05, "memory": 8266, "data_time": 0.01209, "loss_rpn_cls": 0.21515, "loss_rpn_bbox": 0.06379, "s0.loss_cls": 0.48526, "s0.acc": 87.82715, "s0.loss_bbox": 0.14835, "s1.loss_cls": 0.16712, "s1.acc": 92.7052, "s1.loss_bbox": 0.06149, "s2.loss_cls": 0.06667, "s2.acc": 94.5885, "s2.loss_bbox": 0.01432, "loss": 1.22216, "time": 0.67334}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00611, "loss_rpn_cls": 0.08283, "loss_rpn_bbox": 0.04729, "s0.loss_cls": 0.28585, "s0.acc": 92.06885, "s0.loss_bbox": 0.1469, "s1.loss_cls": 0.12866, "s1.acc": 92.76264, "s1.loss_bbox": 0.11071, "s2.loss_cls": 0.05535, "s2.acc": 93.78054, "s2.loss_bbox": 0.05028, "loss": 0.90786, "time": 0.67214}
{"mode": "val", "epoch": 1, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.152, "bbox_mAP_50": 0.263, "bbox_mAP_75": 0.153, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.019, "bbox_mAP_l": 0.188, "bbox_mAP_copypaste": "0.152 0.263 0.153 0.003 0.019 0.188"}
{"mode": "val", "epoch": 1, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.01585, "loss_rpn_cls": 0.06711, "loss_rpn_bbox": 0.04158, "s0.loss_cls": 0.26375, "s0.acc": 92.28416, "s0.loss_bbox": 0.12248, "s1.loss_cls": 0.13077, "s1.acc": 92.11949, "s1.loss_bbox": 0.10415, "s2.loss_cls": 0.06078, "s2.acc": 92.64061, "s2.loss_bbox": 0.0521, "loss": 0.84272, "time": 0.26508}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 8266, "data_time": 0.0129, "loss_rpn_cls": 0.05938, "loss_rpn_bbox": 0.04001, "s0.loss_cls": 0.26489, "s0.acc": 92.26807, "s0.loss_bbox": 0.12845, "s1.loss_cls": 0.12901, "s1.acc": 92.28053, "s1.loss_bbox": 0.10782, "s2.loss_cls": 0.05895, "s2.acc": 92.91044, "s2.loss_bbox": 0.05549, "loss": 0.84401, "time": 0.67218}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00701, "loss_rpn_cls": 0.05723, "loss_rpn_bbox": 0.03985, "s0.loss_cls": 0.25215, "s0.acc": 92.48877, "s0.loss_bbox": 0.11898, "s1.loss_cls": 0.12396, "s1.acc": 92.48436, "s1.loss_bbox": 0.10628, "s2.loss_cls": 0.0578, "s2.acc": 92.89834, "s2.loss_bbox": 0.05554, "loss": 0.81177, "time": 0.66617}
{"mode": "val", "epoch": 2, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.234, "bbox_mAP_50": 0.365, "bbox_mAP_75": 0.254, "bbox_mAP_s": 0.016, "bbox_mAP_m": 0.09, "bbox_mAP_l": 0.284, "bbox_mAP_copypaste": "0.234 0.365 0.254 0.016 0.090 0.284"}
{"mode": "val", "epoch": 2, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.01575, "loss_rpn_cls": 0.05691, "loss_rpn_bbox": 0.03649, "s0.loss_cls": 0.25131, "s0.acc": 92.49568, "s0.loss_bbox": 0.11299, "s1.loss_cls": 0.12546, "s1.acc": 92.4728, "s1.loss_bbox": 0.10117, "s2.loss_cls": 0.06118, "s2.acc": 92.57415, "s2.loss_bbox": 0.05565, "loss": 0.80118, "time": 0.25923}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0001, "memory": 8266, "data_time": 0.01261, "loss_rpn_cls": 0.04634, "loss_rpn_bbox": 0.03396, "s0.loss_cls": 0.23793, "s0.acc": 92.75452, "s0.loss_bbox": 0.11501, "s1.loss_cls": 0.11707, "s1.acc": 92.73889, "s1.loss_bbox": 0.10338, "s2.loss_cls": 0.05593, "s2.acc": 93.00612, "s2.loss_bbox": 0.05702, "loss": 0.76663, "time": 0.6759}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00677, "loss_rpn_cls": 0.05048, "loss_rpn_bbox": 0.03587, "s0.loss_cls": 0.23703, "s0.acc": 92.76123, "s0.loss_bbox": 0.1114, "s1.loss_cls": 0.11829, "s1.acc": 92.67724, "s1.loss_bbox": 0.09925, "s2.loss_cls": 0.05689, "s2.acc": 92.87982, "s2.loss_bbox": 0.05377, "loss": 0.76298, "time": 0.66837}
{"mode": "val", "epoch": 3, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.299, "bbox_mAP_50": 0.447, "bbox_mAP_75": 0.324, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.092, "bbox_mAP_l": 0.359, "bbox_mAP_copypaste": "0.299 0.447 0.324 0.008 0.092 0.359"}
{"mode": "val", "epoch": 3, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.01599, "loss_rpn_cls": 0.04874, "loss_rpn_bbox": 0.03152, "s0.loss_cls": 0.2393, "s0.acc": 92.80806, "s0.loss_bbox": 0.10619, "s1.loss_cls": 0.11824, "s1.acc": 92.80533, "s1.loss_bbox": 0.09699, "s2.loss_cls": 0.05701, "s2.acc": 93.00941, "s2.loss_bbox": 0.05375, "loss": 0.75174, "time": 0.26502}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0001, "memory": 8266, "data_time": 0.01284, "loss_rpn_cls": 0.03678, "loss_rpn_bbox": 0.03026, "s0.loss_cls": 0.20211, "s0.acc": 93.60547, "s0.loss_bbox": 0.09746, "s1.loss_cls": 0.1007, "s1.acc": 93.58039, "s1.loss_bbox": 0.09048, "s2.loss_cls": 0.04929, "s2.acc": 93.65731, "s2.loss_bbox": 0.05202, "loss": 0.6591, "time": 0.67475}
{"mode": "train", "epoch": 4, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00692, "loss_rpn_cls": 0.04536, "loss_rpn_bbox": 0.0337, "s0.loss_cls": 0.21997, "s0.acc": 93.18591, "s0.loss_bbox": 0.10533, "s1.loss_cls": 0.10906, "s1.acc": 93.13475, "s1.loss_bbox": 0.09674, "s2.loss_cls": 0.05256, "s2.acc": 93.29234, "s2.loss_bbox": 0.0541, "loss": 0.71682, "time": 0.67084}
{"mode": "val", "epoch": 4, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.309, "bbox_mAP_50": 0.452, "bbox_mAP_75": 0.33, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.068, "bbox_mAP_l": 0.374, "bbox_mAP_copypaste": "0.309 0.452 0.330 0.008 0.068 0.374"}
{"mode": "val", "epoch": 4, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.01567, "loss_rpn_cls": 0.05389, "loss_rpn_bbox": 0.03274, "s0.loss_cls": 0.21804, "s0.acc": 93.50566, "s0.loss_bbox": 0.09862, "s1.loss_cls": 0.11141, "s1.acc": 93.2122, "s1.loss_bbox": 0.08932, "s2.loss_cls": 0.05344, "s2.acc": 93.34784, "s2.loss_bbox": 0.04988, "loss": 0.70734, "time": 0.25398}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.0001, "memory": 8266, "data_time": 0.01287, "loss_rpn_cls": 0.03468, "loss_rpn_bbox": 0.03128, "s0.loss_cls": 0.19507, "s0.acc": 93.77625, "s0.loss_bbox": 0.09578, "s1.loss_cls": 0.09703, "s1.acc": 93.77589, "s1.loss_bbox": 0.08921, "s2.loss_cls": 0.0475, "s2.acc": 93.88095, "s2.loss_bbox": 0.05143, "loss": 0.64199, "time": 0.67404}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00693, "loss_rpn_cls": 0.03555, "loss_rpn_bbox": 0.02989, "s0.loss_cls": 0.19629, "s0.acc": 93.84705, "s0.loss_bbox": 0.0972, "s1.loss_cls": 0.09678, "s1.acc": 93.93276, "s1.loss_bbox": 0.0897, "s2.loss_cls": 0.04676, "s2.acc": 94.13754, "s2.loss_bbox": 0.05118, "loss": 0.64334, "time": 0.66731}
{"mode": "val", "epoch": 5, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.324, "bbox_mAP_50": 0.477, "bbox_mAP_75": 0.357, "bbox_mAP_s": 0.01, "bbox_mAP_m": 0.106, "bbox_mAP_l": 0.396, "bbox_mAP_copypaste": "0.324 0.477 0.357 0.010 0.106 0.396"}
{"mode": "val", "epoch": 5, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.01583, "loss_rpn_cls": 0.05399, "loss_rpn_bbox": 0.02919, "s0.loss_cls": 0.22951, "s0.acc": 93.17767, "s0.loss_bbox": 0.09841, "s1.loss_cls": 0.1175, "s1.acc": 92.87652, "s1.loss_bbox": 0.09133, "s2.loss_cls": 0.05658, "s2.acc": 93.0591, "s2.loss_bbox": 0.05092, "loss": 0.72745, "time": 0.26142}
{"mode": "train", "epoch": 6, "iter": 400, "lr": 0.0001, "memory": 8266, "data_time": 0.01293, "loss_rpn_cls": 0.03585, "loss_rpn_bbox": 0.03053, "s0.loss_cls": 0.18706, "s0.acc": 94.01929, "s0.loss_bbox": 0.09596, "s1.loss_cls": 0.09063, "s1.acc": 94.1438, "s1.loss_bbox": 0.08833, "s2.loss_cls": 0.0439, "s2.acc": 94.30457, "s2.loss_bbox": 0.05117, "loss": 0.62342, "time": 0.6757}
{"mode": "train", "epoch": 6, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00701, "loss_rpn_cls": 0.03151, "loss_rpn_bbox": 0.02743, "s0.loss_cls": 0.1781, "s0.acc": 94.27661, "s0.loss_bbox": 0.08969, "s1.loss_cls": 0.08712, "s1.acc": 94.31993, "s1.loss_bbox": 0.08607, "s2.loss_cls": 0.04309, "s2.acc": 94.26822, "s2.loss_bbox": 0.05051, "loss": 0.59352, "time": 0.66874}
{"mode": "val", "epoch": 6, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.366, "bbox_mAP_50": 0.522, "bbox_mAP_75": 0.405, "bbox_mAP_s": 0.014, "bbox_mAP_m": 0.11, "bbox_mAP_l": 0.436, "bbox_mAP_copypaste": "0.366 0.522 0.405 0.014 0.110 0.436"}
{"mode": "val", "epoch": 6, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.01582, "loss_rpn_cls": 0.05492, "loss_rpn_bbox": 0.02948, "s0.loss_cls": 0.22351, "s0.acc": 93.60672, "s0.loss_bbox": 0.09491, "s1.loss_cls": 0.11349, "s1.acc": 93.45915, "s1.loss_bbox": 0.08634, "s2.loss_cls": 0.05512, "s2.acc": 93.53912, "s2.loss_bbox": 0.04825, "loss": 0.70602, "time": 0.25701}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 0.0001, "memory": 8266, "data_time": 0.0128, "loss_rpn_cls": 0.03159, "loss_rpn_bbox": 0.02862, "s0.loss_cls": 0.16836, "s0.acc": 94.51526, "s0.loss_bbox": 0.08672, "s1.loss_cls": 0.08102, "s1.acc": 94.74027, "s1.loss_bbox": 0.0823, "s2.loss_cls": 0.03968, "s2.acc": 94.78744, "s2.loss_bbox": 0.04886, "loss": 0.56715, "time": 0.67694}
{"mode": "train", "epoch": 7, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00685, "loss_rpn_cls": 0.03165, "loss_rpn_bbox": 0.02701, "s0.loss_cls": 0.17477, "s0.acc": 94.32446, "s0.loss_bbox": 0.08756, "s1.loss_cls": 0.08559, "s1.acc": 94.4286, "s1.loss_bbox": 0.08318, "s2.loss_cls": 0.04219, "s2.acc": 94.42041, "s2.loss_bbox": 0.05071, "loss": 0.58264, "time": 0.66486}
{"mode": "val", "epoch": 7, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.377, "bbox_mAP_50": 0.525, "bbox_mAP_75": 0.403, "bbox_mAP_s": 0.018, "bbox_mAP_m": 0.129, "bbox_mAP_l": 0.446, "bbox_mAP_copypaste": "0.377 0.525 0.403 0.018 0.129 0.446"}
{"mode": "val", "epoch": 7, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.01579, "loss_rpn_cls": 0.05502, "loss_rpn_bbox": 0.02867, "s0.loss_cls": 0.217, "s0.acc": 93.86707, "s0.loss_bbox": 0.09056, "s1.loss_cls": 0.11073, "s1.acc": 93.65565, "s1.loss_bbox": 0.0832, "s2.loss_cls": 0.05409, "s2.acc": 93.70022, "s2.loss_bbox": 0.04676, "loss": 0.68602, "time": 0.26015}
{"mode": "train", "epoch": 8, "iter": 400, "lr": 0.0001, "memory": 8266, "data_time": 0.01292, "loss_rpn_cls": 0.02719, "loss_rpn_bbox": 0.0241, "s0.loss_cls": 0.153, "s0.acc": 94.995, "s0.loss_bbox": 0.0803, "s1.loss_cls": 0.07332, "s1.acc": 95.18675, "s1.loss_bbox": 0.07611, "s2.loss_cls": 0.03582, "s2.acc": 95.18064, "s2.loss_bbox": 0.04587, "loss": 0.51571, "time": 0.67072}
{"mode": "train", "epoch": 8, "iter": 800, "lr": 0.0001, "memory": 8266, "data_time": 0.00703, "loss_rpn_cls": 0.03291, "loss_rpn_bbox": 0.02934, "s0.loss_cls": 0.17268, "s0.acc": 94.40942, "s0.loss_bbox": 0.08892, "s1.loss_cls": 0.08337, "s1.acc": 94.62493, "s1.loss_bbox": 0.08338, "s2.loss_cls": 0.04137, "s2.acc": 94.62338, "s2.loss_bbox": 0.05025, "loss": 0.58223, "time": 0.66945}
{"mode": "val", "epoch": 8, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.374, "bbox_mAP_50": 0.511, "bbox_mAP_75": 0.403, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.12, "bbox_mAP_l": 0.442, "bbox_mAP_copypaste": "0.374 0.511 0.403 0.005 0.120 0.442"}
{"mode": "val", "epoch": 8, "iter": 244, "lr": 0.0001, "memory": 8266, "data_time": 0.0157, "loss_rpn_cls": 0.05791, "loss_rpn_bbox": 0.02905, "s0.loss_cls": 0.22163, "s0.acc": 93.66795, "s0.loss_bbox": 0.08944, "s1.loss_cls": 0.1134, "s1.acc": 93.42186, "s1.loss_bbox": 0.08254, "s2.loss_cls": 0.05512, "s2.acc": 93.44692, "s2.loss_bbox": 0.04564, "loss": 0.69472, "time": 0.25601}
{"mode": "train", "epoch": 9, "iter": 400, "lr": 1e-05, "memory": 8266, "data_time": 0.0127, "loss_rpn_cls": 0.02368, "loss_rpn_bbox": 0.02353, "s0.loss_cls": 0.13042, "s0.acc": 95.68323, "s0.loss_bbox": 0.07428, "s1.loss_cls": 0.06008, "s1.acc": 96.0443, "s1.loss_bbox": 0.07135, "s2.loss_cls": 0.02973, "s2.acc": 96.01024, "s2.loss_bbox": 0.04387, "loss": 0.45694, "time": 0.66492}
{"mode": "train", "epoch": 9, "iter": 800, "lr": 1e-05, "memory": 8266, "data_time": 0.00691, "loss_rpn_cls": 0.02114, "loss_rpn_bbox": 0.02304, "s0.loss_cls": 0.12535, "s0.acc": 95.73657, "s0.loss_bbox": 0.07464, "s1.loss_cls": 0.05713, "s1.acc": 96.16782, "s1.loss_bbox": 0.07171, "s2.loss_cls": 0.02813, "s2.acc": 96.18804, "s2.loss_bbox": 0.04451, "loss": 0.44566, "time": 0.66045}
{"mode": "val", "epoch": 9, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.426, "bbox_mAP_50": 0.575, "bbox_mAP_75": 0.458, "bbox_mAP_s": 0.022, "bbox_mAP_m": 0.127, "bbox_mAP_l": 0.505, "bbox_mAP_copypaste": "0.426 0.575 0.458 0.022 0.127 0.505"}
{"mode": "val", "epoch": 9, "iter": 244, "lr": 1e-05, "memory": 8266, "data_time": 0.01592, "loss_rpn_cls": 0.0558, "loss_rpn_bbox": 0.02525, "s0.loss_cls": 0.19825, "s0.acc": 94.30552, "s0.loss_bbox": 0.08539, "s1.loss_cls": 0.10371, "s1.acc": 94.04442, "s1.loss_bbox": 0.07977, "s2.loss_cls": 0.051, "s2.acc": 93.98228, "s2.loss_bbox": 0.04499, "loss": 0.64415, "time": 0.26417}
{"mode": "train", "epoch": 10, "iter": 400, "lr": 1e-05, "memory": 8266, "data_time": 0.01291, "loss_rpn_cls": 0.01832, "loss_rpn_bbox": 0.02001, "s0.loss_cls": 0.1097, "s0.acc": 96.22522, "s0.loss_bbox": 0.06695, "s1.loss_cls": 0.04941, "s1.acc": 96.59457, "s1.loss_bbox": 0.06516, "s2.loss_cls": 0.02431, "s2.acc": 96.61342, "s2.loss_bbox": 0.04069, "loss": 0.39454, "time": 0.67086}
{"mode": "train", "epoch": 10, "iter": 800, "lr": 1e-05, "memory": 8266, "data_time": 0.00701, "loss_rpn_cls": 0.01909, "loss_rpn_bbox": 0.02248, "s0.loss_cls": 0.1136, "s0.acc": 96.15344, "s0.loss_bbox": 0.06964, "s1.loss_cls": 0.05175, "s1.acc": 96.54815, "s1.loss_bbox": 0.06614, "s2.loss_cls": 0.02529, "s2.acc": 96.55916, "s2.loss_bbox": 0.04115, "loss": 0.40914, "time": 0.66339}
{"mode": "val", "epoch": 10, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.43, "bbox_mAP_50": 0.575, "bbox_mAP_75": 0.457, "bbox_mAP_s": 0.022, "bbox_mAP_m": 0.131, "bbox_mAP_l": 0.51, "bbox_mAP_copypaste": "0.430 0.575 0.457 0.022 0.131 0.510"}
{"mode": "val", "epoch": 10, "iter": 244, "lr": 1e-05, "memory": 8266, "data_time": 0.01585, "loss_rpn_cls": 0.05488, "loss_rpn_bbox": 0.0249, "s0.loss_cls": 0.19905, "s0.acc": 94.32753, "s0.loss_bbox": 0.0836, "s1.loss_cls": 0.10443, "s1.acc": 94.10591, "s1.loss_bbox": 0.07776, "s2.loss_cls": 0.0517, "s2.acc": 94.0457, "s2.loss_bbox": 0.04431, "loss": 0.64064, "time": 0.26143}
{"mode": "train", "epoch": 11, "iter": 400, "lr": 1e-05, "memory": 8266, "data_time": 0.01298, "loss_rpn_cls": 0.01872, "loss_rpn_bbox": 0.02172, "s0.loss_cls": 0.10952, "s0.acc": 96.22681, "s0.loss_bbox": 0.06848, "s1.loss_cls": 0.04892, "s1.acc": 96.62846, "s1.loss_bbox": 0.06506, "s2.loss_cls": 0.0239, "s2.acc": 96.68838, "s2.loss_bbox": 0.04038, "loss": 0.39669, "time": 0.6732}
{"mode": "train", "epoch": 11, "iter": 800, "lr": 1e-05, "memory": 8266, "data_time": 0.00709, "loss_rpn_cls": 0.01874, "loss_rpn_bbox": 0.02016, "s0.loss_cls": 0.11056, "s0.acc": 96.19165, "s0.loss_bbox": 0.06979, "s1.loss_cls": 0.04946, "s1.acc": 96.65605, "s1.loss_bbox": 0.06814, "s2.loss_cls": 0.0243, "s2.acc": 96.63777, "s2.loss_bbox": 0.04306, "loss": 0.4042, "time": 0.66572}
{"mode": "val", "epoch": 11, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.431, "bbox_mAP_50": 0.576, "bbox_mAP_75": 0.457, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.134, "bbox_mAP_l": 0.511, "bbox_mAP_copypaste": "0.431 0.576 0.457 0.021 0.134 0.511"}
{"mode": "val", "epoch": 11, "iter": 244, "lr": 1e-05, "memory": 8266, "data_time": 0.01602, "loss_rpn_cls": 0.0594, "loss_rpn_bbox": 0.0248, "s0.loss_cls": 0.20337, "s0.acc": 94.25709, "s0.loss_bbox": 0.08319, "s1.loss_cls": 0.10577, "s1.acc": 94.11794, "s1.loss_bbox": 0.07837, "s2.loss_cls": 0.05235, "s2.acc": 94.08141, "s2.loss_bbox": 0.04447, "loss": 0.65174, "time": 0.26047}
{"mode": "train", "epoch": 12, "iter": 400, "lr": 0.0, "memory": 8266, "data_time": 0.01292, "loss_rpn_cls": 0.01663, "loss_rpn_bbox": 0.01966, "s0.loss_cls": 0.10249, "s0.acc": 96.48938, "s0.loss_bbox": 0.06539, "s1.loss_cls": 0.04527, "s1.acc": 96.92528, "s1.loss_bbox": 0.06328, "s2.loss_cls": 0.02215, "s2.acc": 96.97404, "s2.loss_bbox": 0.04018, "loss": 0.37504, "time": 0.66538}
{"mode": "train", "epoch": 12, "iter": 800, "lr": 0.0, "memory": 8266, "data_time": 0.0072, "loss_rpn_cls": 0.01811, "loss_rpn_bbox": 0.02036, "s0.loss_cls": 0.10781, "s0.acc": 96.29602, "s0.loss_bbox": 0.06847, "s1.loss_cls": 0.04719, "s1.acc": 96.76724, "s1.loss_bbox": 0.06549, "s2.loss_cls": 0.023, "s2.acc": 96.80777, "s2.loss_bbox": 0.04091, "loss": 0.39134, "time": 0.66984}
{"mode": "val", "epoch": 12, "iter": 975, "lr": 0.0, "bbox_mAP": 0.433, "bbox_mAP_50": 0.577, "bbox_mAP_75": 0.46, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.134, "bbox_mAP_l": 0.513, "bbox_mAP_copypaste": "0.433 0.577 0.460 0.021 0.134 0.513"}
{"mode": "val", "epoch": 12, "iter": 244, "lr": 0.0, "memory": 8266, "data_time": 0.01592, "loss_rpn_cls": 0.05723, "loss_rpn_bbox": 0.02504, "s0.loss_cls": 0.20052, "s0.acc": 94.38677, "s0.loss_bbox": 0.08354, "s1.loss_cls": 0.1059, "s1.acc": 94.20253, "s1.loss_bbox": 0.07801, "s2.loss_cls": 0.05243, "s2.acc": 94.17597, "s2.loss_bbox": 0.04381, "loss": 0.64647, "time": 0.2585}
{"mode": "train", "epoch": 13, "iter": 400, "lr": 0.0, "memory": 8266, "data_time": 0.01315, "loss_rpn_cls": 0.01796, "loss_rpn_bbox": 0.02066, "s0.loss_cls": 0.10619, "s0.acc": 96.34961, "s0.loss_bbox": 0.06825, "s1.loss_cls": 0.04693, "s1.acc": 96.78346, "s1.loss_bbox": 0.06505, "s2.loss_cls": 0.0228, "s2.acc": 96.84067, "s2.loss_bbox": 0.04072, "loss": 0.38855, "time": 0.67666}
{"mode": "train", "epoch": 13, "iter": 800, "lr": 0.0, "memory": 8266, "data_time": 0.00758, "loss_rpn_cls": 0.01672, "loss_rpn_bbox": 0.01909, "s0.loss_cls": 0.09883, "s0.acc": 96.5863, "s0.loss_bbox": 0.06231, "s1.loss_cls": 0.04334, "s1.acc": 97.01988, "s1.loss_bbox": 0.06062, "s2.loss_cls": 0.02118, "s2.acc": 97.04126, "s2.loss_bbox": 0.03855, "loss": 0.36064, "time": 0.67374}
{"mode": "val", "epoch": 13, "iter": 975, "lr": 0.0, "bbox_mAP": 0.432, "bbox_mAP_50": 0.578, "bbox_mAP_75": 0.462, "bbox_mAP_s": 0.023, "bbox_mAP_m": 0.134, "bbox_mAP_l": 0.512, "bbox_mAP_copypaste": "0.432 0.578 0.462 0.023 0.134 0.512"}
{"mode": "val", "epoch": 13, "iter": 244, "lr": 0.0, "memory": 8266, "data_time": 0.01608, "loss_rpn_cls": 0.05896, "loss_rpn_bbox": 0.02456, "s0.loss_cls": 0.20013, "s0.acc": 94.40998, "s0.loss_bbox": 0.08301, "s1.loss_cls": 0.10555, "s1.acc": 94.16855, "s1.loss_bbox": 0.07733, "s2.loss_cls": 0.05229, "s2.acc": 94.18585, "s2.loss_bbox": 0.04422, "loss": 0.64606, "time": 0.25883}
{"mode": "train", "epoch": 14, "iter": 400, "lr": 0.0, "memory": 8266, "data_time": 0.01315, "loss_rpn_cls": 0.01644, "loss_rpn_bbox": 0.01826, "s0.loss_cls": 0.09851, "s0.acc": 96.60632, "s0.loss_bbox": 0.06176, "s1.loss_cls": 0.04343, "s1.acc": 97.02682, "s1.loss_bbox": 0.05987, "s2.loss_cls": 0.02109, "s2.acc": 97.07431, "s2.loss_bbox": 0.03768, "loss": 0.35704, "time": 0.66948}
{"mode": "train", "epoch": 14, "iter": 800, "lr": 0.0, "memory": 8266, "data_time": 0.00732, "loss_rpn_cls": 0.01784, "loss_rpn_bbox": 0.02068, "s0.loss_cls": 0.10491, "s0.acc": 96.34448, "s0.loss_bbox": 0.0679, "s1.loss_cls": 0.04628, "s1.acc": 96.82566, "s1.loss_bbox": 0.06539, "s2.loss_cls": 0.02272, "s2.acc": 96.84487, "s2.loss_bbox": 0.04136, "loss": 0.38709, "time": 0.66435}
{"mode": "val", "epoch": 14, "iter": 975, "lr": 0.0, "bbox_mAP": 0.433, "bbox_mAP_50": 0.577, "bbox_mAP_75": 0.467, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.134, "bbox_mAP_l": 0.513, "bbox_mAP_copypaste": "0.433 0.577 0.467 0.021 0.134 0.513"}
{"mode": "val", "epoch": 14, "iter": 244, "lr": 0.0, "memory": 8266, "data_time": 0.01581, "loss_rpn_cls": 0.0592, "loss_rpn_bbox": 0.02443, "s0.loss_cls": 0.20393, "s0.acc": 94.34674, "s0.loss_bbox": 0.08364, "s1.loss_cls": 0.10774, "s1.acc": 94.11636, "s1.loss_bbox": 0.07872, "s2.loss_cls": 0.05358, "s2.acc": 94.07258, "s2.loss_bbox": 0.04471, "loss": 0.65594, "time": 0.25858}
{"mode": "train", "epoch": 15, "iter": 400, "lr": 0.0, "memory": 8266, "data_time": 0.01319, "loss_rpn_cls": 0.01605, "loss_rpn_bbox": 0.01902, "s0.loss_cls": 0.09939, "s0.acc": 96.52905, "s0.loss_bbox": 0.06395, "s1.loss_cls": 0.04358, "s1.acc": 97.00323, "s1.loss_bbox": 0.06125, "s2.loss_cls": 0.02151, "s2.acc": 97.01357, "s2.loss_bbox": 0.03917, "loss": 0.36391, "time": 0.67289}
{"mode": "train", "epoch": 15, "iter": 800, "lr": 0.0, "memory": 8266, "data_time": 0.00755, "loss_rpn_cls": 0.01635, "loss_rpn_bbox": 0.01888, "s0.loss_cls": 0.09876, "s0.acc": 96.56433, "s0.loss_bbox": 0.06429, "s1.loss_cls": 0.04304, "s1.acc": 97.02392, "s1.loss_bbox": 0.06223, "s2.loss_cls": 0.02105, "s2.acc": 97.06485, "s2.loss_bbox": 0.03895, "loss": 0.36356, "time": 0.675}
{"mode": "val", "epoch": 15, "iter": 975, "lr": 0.0, "bbox_mAP": 0.435, "bbox_mAP_50": 0.577, "bbox_mAP_75": 0.468, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.134, "bbox_mAP_l": 0.515, "bbox_mAP_copypaste": "0.435 0.577 0.468 0.021 0.134 0.515"}
{"mode": "val", "epoch": 15, "iter": 244, "lr": 0.0, "memory": 8266, "data_time": 0.01612, "loss_rpn_cls": 0.05961, "loss_rpn_bbox": 0.02498, "s0.loss_cls": 0.20115, "s0.acc": 94.41899, "s0.loss_bbox": 0.08305, "s1.loss_cls": 0.10634, "s1.acc": 94.20407, "s1.loss_bbox": 0.07821, "s2.loss_cls": 0.05241, "s2.acc": 94.20429, "s2.loss_bbox": 0.04429, "loss": 0.65004, "time": 0.26281}
{"mode": "train", "epoch": 16, "iter": 400, "lr": 0.0, "memory": 8266, "data_time": 0.01333, "loss_rpn_cls": 0.01782, "loss_rpn_bbox": 0.01977, "s0.loss_cls": 0.10429, "s0.acc": 96.40393, "s0.loss_bbox": 0.06705, "s1.loss_cls": 0.04533, "s1.acc": 96.9338, "s1.loss_bbox": 0.06399, "s2.loss_cls": 0.02178, "s2.acc": 97.03269, "s2.loss_bbox": 0.04015, "loss": 0.38017, "time": 0.67143}
{"mode": "train", "epoch": 16, "iter": 800, "lr": 0.0, "memory": 8266, "data_time": 0.00729, "loss_rpn_cls": 0.01502, "loss_rpn_bbox": 0.01867, "s0.loss_cls": 0.0952, "s0.acc": 96.68237, "s0.loss_bbox": 0.06194, "s1.loss_cls": 0.04153, "s1.acc": 97.16859, "s1.loss_bbox": 0.05979, "s2.loss_cls": 0.02024, "s2.acc": 97.19922, "s2.loss_bbox": 0.03761, "loss": 0.35001, "time": 0.66401}
{"mode": "val", "epoch": 16, "iter": 975, "lr": 0.0, "bbox_mAP": 0.436, "bbox_mAP_50": 0.579, "bbox_mAP_75": 0.47, "bbox_mAP_s": 0.02, "bbox_mAP_m": 0.135, "bbox_mAP_l": 0.516, "bbox_mAP_copypaste": "0.436 0.579 0.470 0.020 0.135 0.516"}
{"mode": "val", "epoch": 16, "iter": 244, "lr": 0.0, "memory": 8266, "data_time": 0.01596, "loss_rpn_cls": 0.05608, "loss_rpn_bbox": 0.02438, "s0.loss_cls": 0.2031, "s0.acc": 94.39257, "s0.loss_bbox": 0.08267, "s1.loss_cls": 0.10706, "s1.acc": 94.25573, "s1.loss_bbox": 0.07772, "s2.loss_cls": 0.05291, "s2.acc": 94.21724, "s2.loss_bbox": 0.04418, "loss": 0.64809, "time": 0.2599}
{"mode": "train", "epoch": 17, "iter": 400, "lr": 0.0, "memory": 8266, "data_time": 0.01337, "loss_rpn_cls": 0.01628, "loss_rpn_bbox": 0.01861, "s0.loss_cls": 0.0955, "s0.acc": 96.6709, "s0.loss_bbox": 0.0627, "s1.loss_cls": 0.04169, "s1.acc": 97.13638, "s1.loss_bbox": 0.06014, "s2.loss_cls": 0.02026, "s2.acc": 97.17723, "s2.loss_bbox": 0.03794, "loss": 0.35312, "time": 0.6747}
{"mode": "train", "epoch": 17, "iter": 800, "lr": 0.0, "memory": 8266, "data_time": 0.00752, "loss_rpn_cls": 0.01698, "loss_rpn_bbox": 0.02017, "s0.loss_cls": 0.10378, "s0.acc": 96.44788, "s0.loss_bbox": 0.06632, "s1.loss_cls": 0.04489, "s1.acc": 96.96645, "s1.loss_bbox": 0.06269, "s2.loss_cls": 0.02163, "s2.acc": 97.02806, "s2.loss_bbox": 0.03941, "loss": 0.37589, "time": 0.67018}
{"mode": "val", "epoch": 17, "iter": 975, "lr": 0.0, "bbox_mAP": 0.437, "bbox_mAP_50": 0.581, "bbox_mAP_75": 0.469, "bbox_mAP_s": 0.02, "bbox_mAP_m": 0.134, "bbox_mAP_l": 0.517, "bbox_mAP_copypaste": "0.437 0.581 0.469 0.020 0.134 0.517"}
{"mode": "val", "epoch": 17, "iter": 244, "lr": 0.0, "memory": 8266, "data_time": 0.01614, "loss_rpn_cls": 0.05771, "loss_rpn_bbox": 0.02403, "s0.loss_cls": 0.20212, "s0.acc": 94.45401, "s0.loss_bbox": 0.08294, "s1.loss_cls": 0.10594, "s1.acc": 94.27653, "s1.loss_bbox": 0.07755, "s2.loss_cls": 0.05244, "s2.acc": 94.21784, "s2.loss_bbox": 0.04377, "loss": 0.6465, "time": 0.26566}
