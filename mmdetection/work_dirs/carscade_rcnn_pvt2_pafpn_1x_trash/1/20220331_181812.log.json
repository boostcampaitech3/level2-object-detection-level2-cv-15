{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+6ddbff8", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.7, 1, 1.5],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.4,\n                    neg_iou_thr=0.4,\n                    min_pos_iou=0.4,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '../dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=768,\n        width=768,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(768, 768), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=768,\n                width=768,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nvalid_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=True,\n        flip_direction=['horizontal', 'vertical', 'diagonal'],\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_train_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=768,\n                        width=768,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/cv_val_1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=True,\n                flip_direction=['horizontal', 'vertical', 'diagonal'],\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=200,\n    hooks=[\n        dict(type='TextLoggerHook', interval=400),\n        dict(\n            type='WandbLoggerHook',\n            interval=200,\n            init_kwargs=dict(project='objectdetection', name='LIM_MM_testing'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\noptimizer = dict(\n    type='AdamW', lr=0.0001, betas=(0.9, 0.999), weight_decay=0.05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineRestart',\n    warmup='linear',\n    warmup_iters=611,\n    warmup_ratio=0.001,\n    periods=[1, 12, 12, 12],\n    restart_weights=[1, 1, 0.5, 0.5],\n    min_lr=0)\nrunner = dict(type='EpochBasedRunner', max_epochs=36)\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nwork_dir = './work_dirs/carscade_rcnn_pvt2_pafpn_1x_trash/1'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2022, "exp_name": "85_cascade_swins_fpn_3x_iou_change.py"}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 7e-05, "memory": 21724, "data_time": 0.02138, "loss_rpn_cls": 0.20954, "loss_rpn_bbox": 0.04246, "s0.loss_cls": 0.48541, "s0.acc": 87.34845, "s0.loss_bbox": 0.31143, "s1.loss_cls": 0.16596, "s1.acc": 93.83866, "s1.loss_bbox": 0.14832, "s2.loss_cls": 0.07131, "s2.acc": 94.26811, "s2.loss_bbox": 0.04279, "loss": 1.47721, "time": 1.47459}
{"mode": "val", "epoch": 1, "iter": 975, "lr": 8e-05, "bbox_mAP": 0.097, "bbox_mAP_50": 0.199, "bbox_mAP_75": 0.089, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.007, "bbox_mAP_l": 0.126, "bbox_mAP_copypaste": "0.097 0.199 0.089 0.000 0.007 0.126"}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 21724, "data_time": 0.02231, "loss_rpn_cls": 0.0606, "loss_rpn_bbox": 0.03527, "s0.loss_cls": 0.33204, "s0.acc": 90.59981, "s0.loss_bbox": 0.25574, "s1.loss_cls": 0.16223, "s1.acc": 90.63707, "s1.loss_bbox": 0.21574, "s2.loss_cls": 0.07542, "s2.acc": 91.22592, "s2.loss_bbox": 0.11533, "loss": 1.25237, "time": 1.47926}
{"mode": "val", "epoch": 2, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.165, "bbox_mAP_50": 0.313, "bbox_mAP_75": 0.161, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.014, "bbox_mAP_l": 0.206, "bbox_mAP_copypaste": "0.165 0.313 0.161 0.003 0.014 0.206"}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0001, "memory": 21724, "data_time": 0.02214, "loss_rpn_cls": 0.05057, "loss_rpn_bbox": 0.03204, "s0.loss_cls": 0.28668, "s0.acc": 91.56885, "s0.loss_bbox": 0.21561, "s1.loss_cls": 0.13964, "s1.acc": 91.65301, "s1.loss_bbox": 0.19001, "s2.loss_cls": 0.06521, "s2.acc": 92.04464, "s2.loss_bbox": 0.10489, "loss": 1.08465, "time": 1.4774}
{"mode": "val", "epoch": 3, "iter": 975, "lr": 0.0001, "bbox_mAP": 0.237, "bbox_mAP_50": 0.407, "bbox_mAP_75": 0.244, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.075, "bbox_mAP_l": 0.289, "bbox_mAP_copypaste": "0.237 0.407 0.244 0.003 0.075 0.289"}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 9e-05, "memory": 21724, "data_time": 0.02193, "loss_rpn_cls": 0.04445, "loss_rpn_bbox": 0.02863, "s0.loss_cls": 0.26299, "s0.acc": 91.99665, "s0.loss_bbox": 0.19716, "s1.loss_cls": 0.12867, "s1.acc": 92.02922, "s1.loss_bbox": 0.17502, "s2.loss_cls": 0.06112, "s2.acc": 92.34168, "s2.loss_bbox": 0.10117, "loss": 0.9992, "time": 1.47577}
{"mode": "val", "epoch": 4, "iter": 975, "lr": 9e-05, "bbox_mAP": 0.256, "bbox_mAP_50": 0.432, "bbox_mAP_75": 0.263, "bbox_mAP_s": 0.002, "bbox_mAP_m": 0.035, "bbox_mAP_l": 0.315, "bbox_mAP_copypaste": "0.256 0.432 0.263 0.002 0.035 0.315"}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 9e-05, "memory": 21724, "data_time": 0.02251, "loss_rpn_cls": 0.04094, "loss_rpn_bbox": 0.02661, "s0.loss_cls": 0.24905, "s0.acc": 92.25181, "s0.loss_bbox": 0.188, "s1.loss_cls": 0.12082, "s1.acc": 92.43527, "s1.loss_bbox": 0.16792, "s2.loss_cls": 0.0575, "s2.acc": 92.68955, "s2.loss_bbox": 0.09763, "loss": 0.94846, "time": 1.4748}
{"mode": "val", "epoch": 5, "iter": 975, "lr": 9e-05, "bbox_mAP": 0.32, "bbox_mAP_50": 0.498, "bbox_mAP_75": 0.347, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.107, "bbox_mAP_l": 0.383, "bbox_mAP_copypaste": "0.320 0.498 0.347 0.004 0.107 0.383"}
{"mode": "train", "epoch": 6, "iter": 400, "lr": 8e-05, "memory": 21724, "data_time": 0.02264, "loss_rpn_cls": 0.0383, "loss_rpn_bbox": 0.0253, "s0.loss_cls": 0.23101, "s0.acc": 92.79816, "s0.loss_bbox": 0.17728, "s1.loss_cls": 0.1113, "s1.acc": 93.06167, "s1.loss_bbox": 0.1585, "s2.loss_cls": 0.05325, "s2.acc": 93.25743, "s2.loss_bbox": 0.09309, "loss": 0.88804, "time": 1.47695}
{"mode": "val", "epoch": 6, "iter": 975, "lr": 8e-05, "bbox_mAP": 0.308, "bbox_mAP_50": 0.474, "bbox_mAP_75": 0.331, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.048, "bbox_mAP_l": 0.375, "bbox_mAP_copypaste": "0.308 0.474 0.331 0.000 0.048 0.375"}
{"mode": "train", "epoch": 7, "iter": 400, "lr": 6e-05, "memory": 21724, "data_time": 0.02254, "loss_rpn_cls": 0.03528, "loss_rpn_bbox": 0.02418, "s0.loss_cls": 0.21522, "s0.acc": 93.25244, "s0.loss_bbox": 0.16669, "s1.loss_cls": 0.10288, "s1.acc": 93.50593, "s1.loss_bbox": 0.14962, "s2.loss_cls": 0.04938, "s2.acc": 93.72948, "s2.loss_bbox": 0.08778, "loss": 0.83103, "time": 1.46884}
{"mode": "val", "epoch": 7, "iter": 975, "lr": 6e-05, "bbox_mAP": 0.321, "bbox_mAP_50": 0.499, "bbox_mAP_75": 0.345, "bbox_mAP_s": 0.014, "bbox_mAP_m": 0.082, "bbox_mAP_l": 0.387, "bbox_mAP_copypaste": "0.321 0.499 0.345 0.014 0.082 0.387"}
{"mode": "train", "epoch": 8, "iter": 400, "lr": 5e-05, "memory": 21724, "data_time": 0.02255, "loss_rpn_cls": 0.03242, "loss_rpn_bbox": 0.02303, "s0.loss_cls": 0.20659, "s0.acc": 93.35501, "s0.loss_bbox": 0.16525, "s1.loss_cls": 0.09725, "s1.acc": 93.70745, "s1.loss_bbox": 0.14845, "s2.loss_cls": 0.04658, "s2.acc": 93.92095, "s2.loss_bbox": 0.08654, "loss": 0.8061, "time": 1.47412}
{"mode": "val", "epoch": 8, "iter": 975, "lr": 5e-05, "bbox_mAP": 0.358, "bbox_mAP_50": 0.523, "bbox_mAP_75": 0.387, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.096, "bbox_mAP_l": 0.429, "bbox_mAP_copypaste": "0.358 0.523 0.387 0.001 0.096 0.429"}
{"mode": "train", "epoch": 9, "iter": 400, "lr": 4e-05, "memory": 21724, "data_time": 0.02284, "loss_rpn_cls": 0.0306, "loss_rpn_bbox": 0.02238, "s0.loss_cls": 0.19023, "s0.acc": 93.82404, "s0.loss_bbox": 0.1535, "s1.loss_cls": 0.08851, "s1.acc": 94.20867, "s1.loss_bbox": 0.13826, "s2.loss_cls": 0.04238, "s2.acc": 94.44619, "s2.loss_bbox": 0.08286, "loss": 0.74871, "time": 1.47196}
{"mode": "val", "epoch": 9, "iter": 975, "lr": 4e-05, "bbox_mAP": 0.377, "bbox_mAP_50": 0.538, "bbox_mAP_75": 0.402, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.124, "bbox_mAP_l": 0.447, "bbox_mAP_copypaste": "0.377 0.538 0.402 0.005 0.124 0.447"}
{"mode": "train", "epoch": 10, "iter": 400, "lr": 3e-05, "memory": 21724, "data_time": 0.02275, "loss_rpn_cls": 0.02938, "loss_rpn_bbox": 0.02147, "s0.loss_cls": 0.17625, "s0.acc": 94.23315, "s0.loss_bbox": 0.14965, "s1.loss_cls": 0.08167, "s1.acc": 94.66576, "s1.loss_bbox": 0.13635, "s2.loss_cls": 0.03938, "s2.acc": 94.79794, "s2.loss_bbox": 0.08227, "loss": 0.71642, "time": 1.47002}
{"mode": "val", "epoch": 10, "iter": 975, "lr": 3e-05, "bbox_mAP": 0.379, "bbox_mAP_50": 0.544, "bbox_mAP_75": 0.412, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.118, "bbox_mAP_l": 0.451, "bbox_mAP_copypaste": "0.379 0.544 0.412 0.001 0.118 0.451"}
{"mode": "train", "epoch": 11, "iter": 400, "lr": 1e-05, "memory": 21724, "data_time": 0.02264, "loss_rpn_cls": 0.02902, "loss_rpn_bbox": 0.02164, "s0.loss_cls": 0.17331, "s0.acc": 94.28699, "s0.loss_bbox": 0.14991, "s1.loss_cls": 0.07951, "s1.acc": 94.81, "s1.loss_bbox": 0.13463, "s2.loss_cls": 0.03813, "s2.acc": 95.00199, "s2.loss_bbox": 0.07987, "loss": 0.70603, "time": 1.46713}
{"mode": "val", "epoch": 11, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.391, "bbox_mAP_50": 0.556, "bbox_mAP_75": 0.428, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.127, "bbox_mAP_l": 0.463, "bbox_mAP_copypaste": "0.391 0.556 0.428 0.003 0.127 0.463"}
{"mode": "train", "epoch": 12, "iter": 400, "lr": 1e-05, "memory": 21724, "data_time": 0.02256, "loss_rpn_cls": 0.02662, "loss_rpn_bbox": 0.02006, "s0.loss_cls": 0.16303, "s0.acc": 94.56294, "s0.loss_bbox": 0.14186, "s1.loss_cls": 0.07471, "s1.acc": 95.00511, "s1.loss_bbox": 0.12924, "s2.loss_cls": 0.03595, "s2.acc": 95.21042, "s2.loss_bbox": 0.07876, "loss": 0.67022, "time": 1.47165}
{"mode": "val", "epoch": 12, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.396, "bbox_mAP_50": 0.563, "bbox_mAP_75": 0.427, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.13, "bbox_mAP_l": 0.469, "bbox_mAP_copypaste": "0.396 0.563 0.427 0.003 0.130 0.469"}
{"mode": "train", "epoch": 13, "iter": 400, "lr": 0.0, "memory": 21724, "data_time": 0.02266, "loss_rpn_cls": 0.02589, "loss_rpn_bbox": 0.02028, "s0.loss_cls": 0.15957, "s0.acc": 94.69965, "s0.loss_bbox": 0.13965, "s1.loss_cls": 0.0725, "s1.acc": 95.22972, "s1.loss_bbox": 0.1274, "s2.loss_cls": 0.03474, "s2.acc": 95.34387, "s2.loss_bbox": 0.07844, "loss": 0.65847, "time": 1.4721}
{"mode": "val", "epoch": 13, "iter": 975, "lr": 0.0, "bbox_mAP": 0.398, "bbox_mAP_50": 0.565, "bbox_mAP_75": 0.433, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.13, "bbox_mAP_l": 0.472, "bbox_mAP_copypaste": "0.398 0.565 0.433 0.003 0.130 0.472"}
{"mode": "train", "epoch": 14, "iter": 400, "lr": 5e-05, "memory": 21724, "data_time": 0.02245, "loss_rpn_cls": 0.02949, "loss_rpn_bbox": 0.02295, "s0.loss_cls": 0.18454, "s0.acc": 94.00244, "s0.loss_bbox": 0.15344, "s1.loss_cls": 0.08525, "s1.acc": 94.44943, "s1.loss_bbox": 0.13812, "s2.loss_cls": 0.0407, "s2.acc": 94.66151, "s2.loss_bbox": 0.0829, "loss": 0.73739, "time": 1.4651}
{"mode": "val", "epoch": 14, "iter": 975, "lr": 5e-05, "bbox_mAP": 0.379, "bbox_mAP_50": 0.549, "bbox_mAP_75": 0.408, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.118, "bbox_mAP_l": 0.45, "bbox_mAP_copypaste": "0.379 0.549 0.408 0.004 0.118 0.450"}
{"mode": "train", "epoch": 15, "iter": 400, "lr": 5e-05, "memory": 21724, "data_time": 0.02244, "loss_rpn_cls": 0.02943, "loss_rpn_bbox": 0.02181, "s0.loss_cls": 0.18053, "s0.acc": 94.11547, "s0.loss_bbox": 0.14858, "s1.loss_cls": 0.08276, "s1.acc": 94.61487, "s1.loss_bbox": 0.13336, "s2.loss_cls": 0.04019, "s2.acc": 94.7378, "s2.loss_bbox": 0.08151, "loss": 0.71818, "time": 1.46826}
{"mode": "val", "epoch": 15, "iter": 975, "lr": 5e-05, "bbox_mAP": 0.378, "bbox_mAP_50": 0.549, "bbox_mAP_75": 0.414, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.122, "bbox_mAP_l": 0.449, "bbox_mAP_copypaste": "0.378 0.549 0.414 0.004 0.122 0.449"}
{"mode": "train", "epoch": 16, "iter": 400, "lr": 5e-05, "memory": 21724, "data_time": 0.02314, "loss_rpn_cls": 0.02935, "loss_rpn_bbox": 0.02173, "s0.loss_cls": 0.17611, "s0.acc": 94.17938, "s0.loss_bbox": 0.14874, "s1.loss_cls": 0.08042, "s1.acc": 94.70502, "s1.loss_bbox": 0.13375, "s2.loss_cls": 0.03837, "s2.acc": 94.91111, "s2.loss_bbox": 0.08063, "loss": 0.7091, "time": 1.47565}
{"mode": "val", "epoch": 16, "iter": 975, "lr": 5e-05, "bbox_mAP": 0.381, "bbox_mAP_50": 0.548, "bbox_mAP_75": 0.421, "bbox_mAP_s": 0.002, "bbox_mAP_m": 0.116, "bbox_mAP_l": 0.453, "bbox_mAP_copypaste": "0.381 0.548 0.421 0.002 0.116 0.453"}
{"mode": "train", "epoch": 17, "iter": 400, "lr": 4e-05, "memory": 21724, "data_time": 0.02246, "loss_rpn_cls": 0.02633, "loss_rpn_bbox": 0.02085, "s0.loss_cls": 0.166, "s0.acc": 94.49078, "s0.loss_bbox": 0.14074, "s1.loss_cls": 0.07586, "s1.acc": 94.9862, "s1.loss_bbox": 0.12719, "s2.loss_cls": 0.03642, "s2.acc": 95.16958, "s2.loss_bbox": 0.07825, "loss": 0.67164, "time": 1.46551}
{"mode": "val", "epoch": 17, "iter": 975, "lr": 4e-05, "bbox_mAP": 0.381, "bbox_mAP_50": 0.551, "bbox_mAP_75": 0.41, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.131, "bbox_mAP_l": 0.454, "bbox_mAP_copypaste": "0.381 0.551 0.410 0.006 0.131 0.454"}
{"mode": "train", "epoch": 18, "iter": 400, "lr": 4e-05, "memory": 21724, "data_time": 0.02249, "loss_rpn_cls": 0.02633, "loss_rpn_bbox": 0.02108, "s0.loss_cls": 0.1594, "s0.acc": 94.67267, "s0.loss_bbox": 0.13922, "s1.loss_cls": 0.07195, "s1.acc": 95.23392, "s1.loss_bbox": 0.12659, "s2.loss_cls": 0.03454, "s2.acc": 95.39052, "s2.loss_bbox": 0.07864, "loss": 0.65774, "time": 1.46762}
{"mode": "val", "epoch": 18, "iter": 975, "lr": 4e-05, "bbox_mAP": 0.388, "bbox_mAP_50": 0.552, "bbox_mAP_75": 0.42, "bbox_mAP_s": 0.017, "bbox_mAP_m": 0.129, "bbox_mAP_l": 0.46, "bbox_mAP_copypaste": "0.388 0.552 0.420 0.017 0.129 0.460"}
{"mode": "train", "epoch": 19, "iter": 400, "lr": 3e-05, "memory": 21724, "data_time": 0.02256, "loss_rpn_cls": 0.02492, "loss_rpn_bbox": 0.02028, "s0.loss_cls": 0.15465, "s0.acc": 94.8512, "s0.loss_bbox": 0.13603, "s1.loss_cls": 0.06999, "s1.acc": 95.35299, "s1.loss_bbox": 0.12306, "s2.loss_cls": 0.03367, "s2.acc": 95.51426, "s2.loss_bbox": 0.0752, "loss": 0.63781, "time": 1.4686}
{"mode": "val", "epoch": 19, "iter": 975, "lr": 3e-05, "bbox_mAP": 0.405, "bbox_mAP_50": 0.565, "bbox_mAP_75": 0.438, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.135, "bbox_mAP_l": 0.479, "bbox_mAP_copypaste": "0.405 0.565 0.438 0.007 0.135 0.479"}
{"mode": "train", "epoch": 20, "iter": 400, "lr": 3e-05, "memory": 21724, "data_time": 0.02266, "loss_rpn_cls": 0.02356, "loss_rpn_bbox": 0.01959, "s0.loss_cls": 0.14691, "s0.acc": 95.07803, "s0.loss_bbox": 0.13009, "s1.loss_cls": 0.06549, "s1.acc": 95.66068, "s1.loss_bbox": 0.11751, "s2.loss_cls": 0.03119, "s2.acc": 95.88342, "s2.loss_bbox": 0.07238, "loss": 0.60671, "time": 1.46842}
{"mode": "val", "epoch": 20, "iter": 975, "lr": 3e-05, "bbox_mAP": 0.406, "bbox_mAP_50": 0.563, "bbox_mAP_75": 0.437, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.124, "bbox_mAP_l": 0.481, "bbox_mAP_copypaste": "0.406 0.563 0.437 0.003 0.124 0.481"}
{"mode": "train", "epoch": 21, "iter": 400, "lr": 2e-05, "memory": 21724, "data_time": 0.0229, "loss_rpn_cls": 0.0242, "loss_rpn_bbox": 0.0198, "s0.loss_cls": 0.14433, "s0.acc": 95.11102, "s0.loss_bbox": 0.13093, "s1.loss_cls": 0.064, "s1.acc": 95.75675, "s1.loss_bbox": 0.11867, "s2.loss_cls": 0.03085, "s2.acc": 95.85535, "s2.loss_bbox": 0.07272, "loss": 0.60549, "time": 1.47226}
{"mode": "val", "epoch": 21, "iter": 975, "lr": 2e-05, "bbox_mAP": 0.405, "bbox_mAP_50": 0.566, "bbox_mAP_75": 0.437, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.134, "bbox_mAP_l": 0.48, "bbox_mAP_copypaste": "0.405 0.566 0.437 0.004 0.134 0.480"}
{"mode": "train", "epoch": 22, "iter": 400, "lr": 1e-05, "memory": 21724, "data_time": 0.02255, "loss_rpn_cls": 0.02261, "loss_rpn_bbox": 0.01894, "s0.loss_cls": 0.13951, "s0.acc": 95.23883, "s0.loss_bbox": 0.12773, "s1.loss_cls": 0.06179, "s1.acc": 95.84251, "s1.loss_bbox": 0.11657, "s2.loss_cls": 0.0296, "s2.acc": 96.00932, "s2.loss_bbox": 0.07224, "loss": 0.58899, "time": 1.46942}
{"mode": "val", "epoch": 22, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.41, "bbox_mAP_50": 0.57, "bbox_mAP_75": 0.437, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.135, "bbox_mAP_l": 0.485, "bbox_mAP_copypaste": "0.410 0.570 0.437 0.007 0.135 0.485"}
{"mode": "train", "epoch": 23, "iter": 400, "lr": 1e-05, "memory": 21724, "data_time": 0.02287, "loss_rpn_cls": 0.02248, "loss_rpn_bbox": 0.01833, "s0.loss_cls": 0.13366, "s0.acc": 95.4191, "s0.loss_bbox": 0.12344, "s1.loss_cls": 0.05859, "s1.acc": 96.0489, "s1.loss_bbox": 0.11282, "s2.loss_cls": 0.02832, "s2.acc": 96.14087, "s2.loss_bbox": 0.06985, "loss": 0.56748, "time": 1.47431}
{"mode": "val", "epoch": 23, "iter": 975, "lr": 1e-05, "bbox_mAP": 0.417, "bbox_mAP_50": 0.577, "bbox_mAP_75": 0.445, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.135, "bbox_mAP_l": 0.494, "bbox_mAP_copypaste": "0.417 0.577 0.445 0.006 0.135 0.494"}
{"mode": "train", "epoch": 24, "iter": 400, "lr": 0.0, "memory": 21724, "data_time": 0.02263, "loss_rpn_cls": 0.0214, "loss_rpn_bbox": 0.01863, "s0.loss_cls": 0.13274, "s0.acc": 95.43575, "s0.loss_bbox": 0.1223, "s1.loss_cls": 0.05762, "s1.acc": 96.10678, "s1.loss_bbox": 0.11271, "s2.loss_cls": 0.02747, "s2.acc": 96.24933, "s2.loss_bbox": 0.06964, "loss": 0.56252, "time": 1.46973}
{"mode": "val", "epoch": 24, "iter": 975, "lr": 0.0, "bbox_mAP": 0.414, "bbox_mAP_50": 0.578, "bbox_mAP_75": 0.446, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.13, "bbox_mAP_l": 0.491, "bbox_mAP_copypaste": "0.414 0.578 0.446 0.007 0.130 0.491"}
{"mode": "train", "epoch": 25, "iter": 400, "lr": 0.0, "memory": 21724, "data_time": 0.023, "loss_rpn_cls": 0.0216, "loss_rpn_bbox": 0.01793, "s0.loss_cls": 0.13006, "s0.acc": 95.56108, "s0.loss_bbox": 0.11981, "s1.loss_cls": 0.05718, "s1.acc": 96.16525, "s1.loss_bbox": 0.11009, "s2.loss_cls": 0.02732, "s2.acc": 96.2939, "s2.loss_bbox": 0.06845, "loss": 0.55246, "time": 1.47395}
{"mode": "val", "epoch": 25, "iter": 975, "lr": 0.0, "bbox_mAP": 0.417, "bbox_mAP_50": 0.58, "bbox_mAP_75": 0.449, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.139, "bbox_mAP_l": 0.493, "bbox_mAP_copypaste": "0.417 0.580 0.449 0.008 0.139 0.493"}
{"mode": "train", "epoch": 26, "iter": 400, "lr": 5e-05, "memory": 21724, "data_time": 0.02278, "loss_rpn_cls": 0.02435, "loss_rpn_bbox": 0.01942, "s0.loss_cls": 0.15502, "s0.acc": 94.80299, "s0.loss_bbox": 0.1339, "s1.loss_cls": 0.06955, "s1.acc": 95.3515, "s1.loss_bbox": 0.12077, "s2.loss_cls": 0.03355, "s2.acc": 95.5291, "s2.loss_bbox": 0.07495, "loss": 0.63153, "time": 1.47163}
{"mode": "val", "epoch": 26, "iter": 975, "lr": 5e-05, "bbox_mAP": 0.383, "bbox_mAP_50": 0.549, "bbox_mAP_75": 0.416, "bbox_mAP_s": 0.012, "bbox_mAP_m": 0.126, "bbox_mAP_l": 0.455, "bbox_mAP_copypaste": "0.383 0.549 0.416 0.012 0.126 0.455"}
{"mode": "train", "epoch": 27, "iter": 400, "lr": 5e-05, "memory": 21724, "data_time": 0.02265, "loss_rpn_cls": 0.02499, "loss_rpn_bbox": 0.02112, "s0.loss_cls": 0.14975, "s0.acc": 94.91524, "s0.loss_bbox": 0.13192, "s1.loss_cls": 0.06789, "s1.acc": 95.44525, "s1.loss_bbox": 0.12105, "s2.loss_cls": 0.03248, "s2.acc": 95.63506, "s2.loss_bbox": 0.07496, "loss": 0.62417, "time": 1.47216}
{"mode": "val", "epoch": 27, "iter": 975, "lr": 5e-05, "bbox_mAP": 0.393, "bbox_mAP_50": 0.555, "bbox_mAP_75": 0.421, "bbox_mAP_s": 0.016, "bbox_mAP_m": 0.122, "bbox_mAP_l": 0.466, "bbox_mAP_copypaste": "0.393 0.555 0.421 0.016 0.122 0.466"}
{"mode": "train", "epoch": 28, "iter": 400, "lr": 5e-05, "memory": 21724, "data_time": 0.02281, "loss_rpn_cls": 0.02453, "loss_rpn_bbox": 0.01921, "s0.loss_cls": 0.14816, "s0.acc": 94.99785, "s0.loss_bbox": 0.12776, "s1.loss_cls": 0.06612, "s1.acc": 95.60591, "s1.loss_bbox": 0.11655, "s2.loss_cls": 0.03194, "s2.acc": 95.71256, "s2.loss_bbox": 0.07384, "loss": 0.60811, "time": 1.4722}
{"mode": "val", "epoch": 28, "iter": 975, "lr": 5e-05, "bbox_mAP": 0.387, "bbox_mAP_50": 0.546, "bbox_mAP_75": 0.415, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.112, "bbox_mAP_l": 0.46, "bbox_mAP_copypaste": "0.387 0.546 0.415 0.001 0.112 0.460"}
